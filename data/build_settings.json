{"ASSETCATALOG_COMPILER_LEADERBOARD_IDENTIFIER_PREFIX":{"name":"Leaderboard Identifier Prefix","description":"Leaderboards in the asset catalog may optionally specify a Game Center identifier. If they do not, their name will be prefixed by this value to form an automatically generated identifier.","type":"String","default_value":"$(PRODUCT_NAME:identifier).game-center.leaderboard.","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_LEADERBOARD_SET_IDENTIFIER_PREFIX":{"name":"Leaderboard Set Identifier Prefix","description":"Leaderboard sets in the asset catalog may optionally specify a Game Center identifier. If they do not, their name will be prefixed by this value to form an automatically generated identifier.","type":"String","default_value":"$(PRODUCT_NAME:identifier).game-center.leaderboard-set.","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_FLATTENED_APP_ICON_PATH":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SUPPORTS_MACCATALYST":{"name":"Supports Mac Catalyst","description":"Support building this target for Mac Catalyst.","type":"Boolean","default_value":"YES","category":"Deployment","values":null,"command_line_arguments":null},"DERIVE_MACCATALYST_PRODUCT_BUNDLE_IDENTIFIER":{"name":"Derive Mac Catalyst Product Bundle Identifier","description":"When enabled, Xcode will automatically derive a bundle identifier for this target from its original bundle identifier when it's building for Mac Catalyst.","type":"Boolean","default_value":"NO","category":"Deployment","values":null,"command_line_arguments":null},"IS_MACCATALYST":{"name":"Building for Mac Catalyst","description":"Indicates whether the target is building for Mac Catalyst. This build setting is intended for use in shell scripts and build setting composition and should be considered read-only.","type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":null},"LD_THREAD_SANITIZER":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_THREAD_SANITIZER)","category":null,"values":null,"command_line_arguments":{"YES":["-fsanitize=thread"],"NO":[]}},"CLANG_BITCODE_GENERATION_MODE":{"name":null,"description":null,"type":"Enumeration","default_value":"$(BITCODE_GENERATION_MODE)","category":null,"values":["none","marker","bitcode"],"command_line_arguments":{"marker":["-fembed-bitcode-marker"],"bitcode":["-fembed-bitcode"]}},"CLANG_THREAD_SANITIZER":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_THREAD_SANITIZER)","category":null,"values":null,"command_line_arguments":{"YES":["-fsanitize=thread"],"NO":[]}},"ASSETCATALOG_COMPILER_COMPLICATION_NAME":{"name":"Watch Complication Name","description":"The name of a watch complication to use from the asset catalog.","type":"String","default_value":null,"category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"LD_BITCODE_GENERATION_MODE":{"name":null,"description":null,"type":"Enumeration","default_value":"$(BITCODE_GENERATION_MODE)","category":null,"values":["marker","bitcode"],"command_line_arguments":{"marker":["-fembed-bitcode-marker"],"bitcode":["-fembed-bitcode"]}},"LD_VERIFY_BITCODE":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":["-Xlinker","-bitcode_verify"],"NO":[]}},"LD_HIDE_BITCODE_SYMBOLS":{"name":null,"description":null,"type":"Boolean","default_value":"$(HIDE_BITCODE_SYMBOLS)","category":null,"values":null,"command_line_arguments":{"YES":["-Xlinker","-bitcode_hide_symbols"],"NO":[]}},"LD_GENERATE_BITCODE_SYMBOL_MAP":{"name":null,"description":null,"type":"Boolean","default_value":"$(HIDE_BITCODE_SYMBOLS)","category":null,"values":null,"command_line_arguments":{"YES":["-Xlinker","-bitcode_symbol_map","-Xlinker","$(BUILT_PRODUCTS_DIR)"],"NO":[]}},"COMBINE_HIDPI_IMAGES":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"PRODUCT_DEFINITION_PLIST":{"name":null,"description":"Path to a file specifying additional requirements for a product archive.","type":"String","default_value":"","category":"Deployment","values":null,"command_line_arguments":null},"BUNDLE_FORMAT":{"name":null,"description":null,"type":"Enumeration","default_value":"shallow","category":null,"values":["deep","shallow"],"command_line_arguments":null},"CLANG_TARGET_TRIPLE_ARCHS":{"name":null,"description":null,"type":"StringList","default_value":"$(CURRENT_ARCH)","category":null,"values":null,"command_line_arguments":["-target","$(value)-$(LLVM_TARGET_TRIPLE_VENDOR)-$(LLVM_TARGET_TRIPLE_OS_VERSION)$(LLVM_TARGET_TRIPLE_SUFFIX)"]},"CLANG_TARGET_TRIPLE_VARIANTS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CLANG_TOOLCHAIN_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":["$(value)"]},"CLANG_MACRO_BACKTRACE_LIMIT":{"name":null,"description":null,"type":"String","default_value":"0","category":null,"values":null,"command_line_arguments":null},"CLANG_RETAIN_COMMENTS_FROM_SYSTEM_HEADERS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-fretain-comments-from-system-headers"],"NO":[]}},"CLANG_COLOR_DIAGNOSTICS":{"name":null,"description":null,"type":"Boolean","default_value":"$(COLOR_DIAGNOSTICS)","category":null,"values":null,"command_line_arguments":{"YES":["-fcolor-diagnostics"],"NO":[]}},"GCC_INPUT_FILETYPE":{"name":"Compile Sources As","description":"Specifies whether to compile each source file according to its file type, or whether to treat all source files in the target as if they are of a specific language.","type":"Enumeration","default_value":"automatic","category":"Language","values":["automatic","sourcecode.c.c","sourcecode.c.objc","sourcecode.cpp.cpp","sourcecode.cpp.objcpp"],"command_line_arguments":null},"GCC_OPERATION":{"name":null,"description":null,"type":"Enumeration","default_value":"compile","category":null,"values":["compile","generate-preprocessed","generate-assembler","precompile","separate-symbols"],"command_line_arguments":null},"GCC_USE_STANDARD_INCLUDE_SEARCHING":{"name":"Use Standard System Header Directory Searching","description":"Controls whether the standard system directories are searched for header files. When disabled, only the directories you have specified with `-I` options (and the directory of the current file, if appropriate) are searched.","type":"Boolean","default_value":"YES","category":"Language","values":null,"command_line_arguments":{"YES":[],"NO":["-nostdinc"]}},"GCC_C_LANGUAGE_STANDARD":{"name":"C Language Dialect","description":"Choose a standard or non-standard C language dialect.\n\n- _ANSI C:_ Accept ISO C90 and ISO C++, turning off GNU extensions that are incompatible. `-ansi` Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but not the equivalent ` __asm__ `, ` __inline__ `, and ` __typeof__ ` forms), and the `//` syntax for comments. This setting also enables trigraphs.\n\n- _C89:_ Accept ISO C90 (1990), but not GNU extensions. `-std=c89`\n\n- _GNU89:_ Accept ISO C90 and GNU extensions. `-std=gnu89`\n\n- _C99:_ Accept ISO C99 (1999), but not GNU extensions. `-std=c99`\n\n- _GNU99:_ Accept ISO C99 and GNU extensions. `-std=gnu99`\n\n- _C11:_ Accept ISO C11 (2011), but not GNU extensions. `-std=c11`\n\n- _GNU11:_ Accept ISO C11 and GNU extensions. `-std=gnu11`\n\n- _Compiler Default:_ Tells the compiler to use its default C language dialect. This is normally the best choice unless you have specific needs. (Currently equivalent to GNU99.)","type":"Enumeration","default_value":"compiler-default","category":"Language","values":["ansi","c89","gnu89","c99","gnu99","c11","gnu11","compiler-default"],"command_line_arguments":{"ansi":["-ansi"],"compiler-default":[],"\u003c\u003cotherwise\u003e\u003e":["-std=$(value)"]}},"CLANG_CXX_LANGUAGE_STANDARD":{"name":"C++ Language Dialect","description":"Choose a standard or non-standard C++ language dialect. Options include:\n\n- _C++98:_ Accept ISO C++ 1998 with amendments, but not GNU extensions. `-std=c++98`\n\n- _GNU++98:_ Accept ISO C++ 1998 with amendments and GNU extensions. `-std=gnu++98`\n\n- _C++11:_ Accept the ISO C++ 2011 standard with amendments, but not GNU extensions. `-std=c++11`\n\n- _GNU++11:_ Accept the ISO C++ 2011 standard with amendments and GNU extensions. `-std=gnu++11`\n\n- _C++14:_ Accept the ISO C++ 2014 standard with amendments, but not GNU extensions. `-std=c++14`\n\n- _GNU++14:_ Accept the ISO C++ 2014 standard with amendments and GNU extensions. `-std=gnu++14`\n\n- _C++17:_ Accept the ISO C++ 2017 standard with amendments, but not GNU extensions. `-std=c++17`\n\n- _GNU++17:_ Accept the ISO C++ 2017 standard with amendments and GNU extensions. `-std=gnu++17`\n\n- _Compiler Default:_ Tells the compiler to use its default C++ language dialect. This is normally the best choice unless you have specific needs. (Currently equivalent to GNU++98.)","type":"Enumeration","default_value":"compiler-default","category":"LanguageCXX","values":["c++98","gnu++98","c++0x","gnu++0x","c++14","gnu++14","c++17","gnu++17","compiler-default"],"command_line_arguments":{"c++0x":["-std=c++11"],"c++17":["-std=c++1z"],"gnu++0x":["-std=gnu++11"],"\u003c\u003cotherwise\u003e\u003e":["-std=$(value)"],"gnu++17":["-std=gnu++1z"],"compiler-default":[]}},"CLANG_CXX_LIBRARY":{"name":"C++ Standard Library","description":"Choose a version of the C++ standard library to use.\n\n- _libstdc++:_ A traditional C++ standard library that works with GCC and Clang (default).\n\n- _libc++:_ A highly optimized C++ standard library that works only with Clang, and is designed to support new C++11 features.","type":"Enumeration","default_value":"compiler-default","category":"LanguageCXX","values":["libstdc++","libc++","compiler-default"],"command_line_arguments":{"compiler-default":[],"\u003c\u003cotherwise\u003e\u003e":["-stdlib=$(value)"]}},"CLANG_ENABLE_OBJC_ARC":{"name":"Objective-C Automatic Reference Counting","description":"Compiles reference-counted Objective-C code (when garbage collection is not enabled) to use Automatic Reference Counting. Code compiled using automated reference counting is compatible with other code (such as frameworks) compiled using either manual reference counting (for example, traditional `retain` and `release` messages) or automated reference counting. Using this mode is currently incompatible with compiling code to use Objective-C Garbage Collection.","type":"Boolean","default_value":"NO","category":"LanguageObjC","values":null,"command_line_arguments":{"YES":["-fobjc-arc"],"NO":[]}},"CLANG_ENABLE_OBJC_WEAK":{"name":"Weak References in Manual Retain Release","description":"Compiles Objective-C code to enable weak references for code compiled with manual retain release (MRR) semantics.","type":"Boolean","default_value":"NO","category":"LanguageObjC","values":null,"command_line_arguments":{"YES":["-fobjc-weak"],"NO":[]}},"CLANG_LINK_OBJC_RUNTIME":{"name":"Implicitly Link Objective-C Runtime Support","description":"When linking a target using Objective-C code, implicitly link in Foundation (and if deploying back to an older OS) a backwards compatibility library to allow newer language features to run on an OS where the runtime support is not natively available. Most targets that use Objective-C should use this, although there are rare cases where a target should opt out of this behavior.","type":"Boolean","default_value":"YES","category":"LanguageObjC","values":null,"command_line_arguments":{"YES":[],"NO":[]}},"CLANG_ENABLE_MODULES":{"name":"Enable Modules (C and Objective-C)","description":"Enables the use of modules for system APIs. System headers are imported as semantic modules instead of raw headers. This can result in faster builds and project indexing.","type":"Boolean","default_value":"NO","category":"LanguageModules","values":null,"command_line_arguments":{"YES":["-fmodules"],"NO":[]}},"CLANG_ENABLE_MODULE_DEBUGGING":{"name":"Enable Clang Module Debugging","description":"When this setting is enabled, `clang` will use the shared debug info available in `clang` modules and precompiled headers. This results in smaller build artifacts, faster compile times, and more complete debug info. This setting should only be disabled when building static libraries with debug info for distribution.","type":"Boolean","default_value":"YES","category":"LanguageModules","values":null,"command_line_arguments":null},"CLANG_DEBUG_MODULES":{"name":null,"description":null,"type":"Boolean","default_value":"$(CLANG_ENABLE_MODULE_DEBUGGING)","category":null,"values":null,"command_line_arguments":{"YES":["-gmodules"],"NO":[]}},"CLANG_MODULE_CACHE_PATH":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CLANG_MODULE_LSV":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-Xclang","-fmodules-local-submodule-visibility"],"NO":[]}},"CLANG_MODULES_AUTOLINK":{"name":"Link Frameworks Automatically","description":"Automatically link SDK frameworks that are referenced using `#import` or `#include`. This feature requires also enabling support for modules. This build setting only applies to C-family languages.","type":"Boolean","default_value":"YES","category":"LanguageModules","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-autolink"]}},"CLANG_MODULES_DISABLE_PRIVATE_WARNING":{"name":"Disable Private Modules Warnings","description":"Disable warnings related to the recommended use of private module naming. This only makes sense when support for modules is enabled.","type":"Boolean","default_value":"NO","category":"LanguageModules","values":null,"command_line_arguments":{"YES":["-Wno-private-module"],"NO":[]}},"CLANG_MODULES_PRUNE_INTERVAL":{"name":null,"description":null,"type":"String","default_value":"86400","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-fmodules-prune-interval=$(value)"]}},"CLANG_MODULES_PRUNE_AFTER":{"name":null,"description":null,"type":"String","default_value":"345600","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-fmodules-prune-after=$(value)"]}},"CLANG_MODULES_IGNORE_MACROS":{"name":null,"description":null,"type":"StringList","default_value":"$(GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS)","category":null,"values":null,"command_line_arguments":["-fmodules-ignore-macro=$(value)"]},"CLANG_MODULES_VALIDATE_SYSTEM_HEADERS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-fmodules-validate-system-headers"],"NO":[]}},"CLANG_MODULES_BUILD_SESSION_FILE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-fbuild-session-file=$(value)","-fmodules-validate-once-per-build-session"]}},"CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES":{"name":"Allow Non-modular Includes In Framework Modules","description":"Enabling this setting allows non-modular includes to be used from within framework modules. This is inherently unsafe, as such headers might cause duplicate definitions when used by any client that imports both the framework and the non-modular includes.","type":"Boolean","default_value":"NO","category":"LanguageModules","values":null,"command_line_arguments":{"YES":[],"NO":["-Wnon-modular-include-in-framework-module","-Werror=non-modular-include-in-framework-module"]}},"CLANG_ENABLE_MODULE_IMPLEMENTATION_OF":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"NO":[],"YES":["-fmodule-name=$(PRODUCT_MODULE_NAME)"]}},"CLANG_ENABLE_APP_EXTENSION":{"name":null,"description":null,"type":"Boolean","default_value":"$(APPLICATION_EXTENSION_API_ONLY)","category":null,"values":null,"command_line_arguments":{"YES":["-fapplication-extension"],"NO":[]}},"GCC_CHAR_IS_UNSIGNED_CHAR":{"name":"'char' Type Is Unsigned","description":"Enabling this setting causes `char` to be unsigned by default, disabling it causes `char` to be signed by default.","type":"Boolean","default_value":"NO","category":"Language","values":null,"command_line_arguments":{"YES":["-funsigned-char"],"NO":[]}},"GCC_ENABLE_ASM_KEYWORD":{"name":"Allow 'asm', 'inline', 'typeof'","description":"Controls whether `asm`, `inline`, and `typeof` are treated as keywords or whether they can be used as identifiers.","type":"Boolean","default_value":"YES","category":"Language","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-asm"]}},"GCC_ENABLE_BUILTIN_FUNCTIONS":{"name":"Recognize Builtin Functions","description":"Controls whether builtin functions that do not begin with `__builtin_` as prefix are recognized.\n\nGCC normally generates special code to handle certain builtin functions more efficiently; for instance, calls to `alloca` may become single instructions that adjust the stack directly, and calls to `memcpy` may become inline copy loops. The resulting code is often both smaller and faster, but since the function calls no longer appear as such, you cannot set a breakpoint on those calls, nor can you change the behavior of the functions by linking with a different library. In addition, when a function is recognized as a builtin function, GCC may use information about that function to warn about problems with calls to that function, or to generate more efficient code, even if the resulting code still contains calls to that function. For example, warnings are given with `-Wformat` for bad calls to `printf`, when `printf` is built in, and `strlen` is known not to modify global memory.","type":"Boolean","default_value":"YES","category":"Language","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-builtin"]}},"GCC_ENABLE_TRIGRAPHS":{"name":"Enable Trigraphs","description":"Controls whether or not trigraphs are permitted in the source code.","type":"Boolean","default_value":"NO","category":"Language","values":null,"command_line_arguments":{"YES":["-trigraphs"],"NO":["-Wno-trigraphs"]}},"GCC_ENABLE_CPP_EXCEPTIONS":{"name":"Enable C++ Exceptions","description":"Enable C++ exception handling. Generates extra code needed to propagate exceptions. For some targets, this implies GCC will generate frame unwind information for all functions, which can produce significant data size overhead, although it does not affect execution. If you do not specify this option, GCC will enable it by default for languages like C++ that normally require exception handling, and disable it for languages like C that do not normally require it. However, you may need to enable this option when compiling C code that needs to interoperate properly with exception handlers written in C++.","type":"Boolean","default_value":"YES","category":"LanguageCXX","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-exceptions"]}},"GCC_ENABLE_CPP_RTTI":{"name":"Enable C++ Runtime Types","description":"Enable generation of information about every class with virtual functions for use by the C++ runtime type identification features (`dynamic_cast` and `typeid`). If you don't use those parts of the language, you can save some space by using this flag. Note that exception handling uses the same information, but it will generate it as needed.","type":"Boolean","default_value":"YES","category":"LanguageCXX","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-rtti","-fno-sanitize=vptr"]}},"GCC_ENABLE_PASCAL_STRINGS":{"name":"Recognize Pascal Strings","description":"Recognize and construct Pascal-style string literals. Its use in new code is discouraged.\n\nPascal string literals take the form `\"\\pstring\"` . The special escape sequence `\\p` denotes the Pascal length byte for the string, and will be replaced at compile time with the number of characters that follow. The `\\p` may only appear at the beginning of a string literal, and may not appear in wide string literals or as an integral constant.","type":"Boolean","default_value":"YES","category":"Language","values":null,"command_line_arguments":{"YES":["-fpascal-strings"],"NO":[]}},"GCC_SHORT_ENUMS":{"name":"Short Enumeration Constants","description":"Make enums only as large as needed for the range of possible values.\n\nThis setting generates code that may not binary compatible with code generated without this setting or with macOS frameworks.","type":"Boolean","default_value":"NO","category":"Language","values":null,"command_line_arguments":{"YES":["-fshort-enums"],"NO":[]}},"GCC_LINK_WITH_DYNAMIC_LIBRARIES":{"name":"Enable Linking With Shared Libraries","description":"Enabling this option allows linking with the shared libraries. This is the default for most product types.","type":"Boolean","default_value":"YES","category":"Language","values":null,"command_line_arguments":{"YES":[],"NO":["-static"]}},"GCC_ENABLE_FLOATING_POINT_LIBRARY_CALLS":{"name":"Generate Floating Point Library Calls","description":"Generate output containing library calls for floating point.","type":"Boolean","default_value":"NO","category":"Language","values":null,"command_line_arguments":{"YES":["-msoft-float"],"NO":[]}},"CLANG_ENABLE_CPP_STATIC_DESTRUCTORS":{"name":"Destroy Static Objects","description":"Controls whether variables with static or thread storage duration should have their exit-time destructors run.","type":"Boolean","default_value":"YES","category":"LanguageCXX","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-c++-static-destructors"]}},"GCC_PREFIX_HEADER":{"name":"Prefix Header","description":"Implicitly include the named header. The path given should either be a project relative path or an absolute path.","type":"Path","default_value":"$(PREFIX_HEADER)","category":null,"values":null,"command_line_arguments":null},"GCC_PRECOMPILE_PREFIX_HEADER":{"name":"Precompile Prefix Header","description":"Generates a precompiled header for the prefix header, which should reduce overall build times.\n\nPrecompiling the prefix header will be most effective if the contents of the prefix header or any file it includes change rarely. If the contents of the prefix header or any file it includes change frequently, there may be a negative impact to overall build time.","type":"Boolean","default_value":"$(PRECOMPILE_PREFIX_HEADER)","category":null,"values":null,"command_line_arguments":null},"GCC_INCREASE_PRECOMPILED_HEADER_SHARING":{"name":"Increase Sharing of Precompiled Headers","description":"Enabling this option will enable increased sharing of precompiled headers among targets that share the same prefix header and precompiled header directory.\n\nXcode distinguishes between precompiled header (PCH) files by generating a hash value based on the command-line options to the compiler used to create the PCH. Enabling this option will exclude certain compiler options from that hash. Presently this option will exclude search path options (`-I`, `-iquote`, `-isystem`, `-F`, `-L`) from the hash.\n\nEnabling increased sharing of PCH files carries some risk—if two targets use the same prefix header but have different include paths that cause the prefix header to include different files when they are precompiled, then subtle problems may result because one target will use a PCH that was built using files included by the other target. In this case, this option must be turned off in order to enforce correctness.","type":"Boolean","default_value":"NO","category":"Language","values":null,"command_line_arguments":null},"OTHER_CFLAGS":{"name":"Other C Flags","description":"Space-separated list of additional flags to pass to the compiler for C and Objective-C files. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular C or Objective-C compiler flag.","type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"OTHER_CPLUSPLUSFLAGS":{"name":"Other C++ Flags","description":"Space-separated list of additional flags to pass to the compiler for C++ and Objective-C++ files. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a C++ or Objective-C++ compiler flag.","type":"StringList","default_value":"$(OTHER_CFLAGS)","category":null,"values":null,"command_line_arguments":null},"GCC_GENERATE_DEBUGGING_SYMBOLS":{"name":"Generate Debug Symbols","description":"Enables or disables generation of debug symbols. When debug symbols are enabled, the level of detail can be controlled by the [Debug Information Format (DEBUG\\_INFORMATION\\_FORMAT)](itcaec37c2a6.html#dev881878d77) setting.","type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":{"YES":["-g"],"NO":[]}},"GCC_OPTIMIZATION_LEVEL":{"name":"Optimization Level","description":"Specifies the degree to which the generated code is optimized for speed and binary size.\n\n- _None:_ Do not optimize. `-O0` With this setting, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results. Statements are independent—if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the source code.\n\n- _Fast:_ Optimizing compilation takes somewhat more time, and a lot more memory for a large function. `-O1` With this setting, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time. In Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are disabled by default when optimizing.\n\n- _Faster:_ The compiler performs nearly all supported optimizations that do not involve a space-speed tradeoff. `-O2` With this setting, the compiler does not perform loop unrolling or function inlining, or register renaming. As compared to the `Fast` setting, this setting increases both compilation time and the performance of the generated code.\n\n- _Fastest:_ Turns on all optimizations specified by the `Faster` setting and also turns on function inlining and register renaming options. This setting may result in a larger binary. `-O3`\n\n- _Fastest, Smallest:_ Optimize for size. This setting enables all `Faster` optimizations that do not typically increase code size. It also performs further optimizations designed to reduce code size. `-Os`\n\n- _Fastest, Aggressive Optimizations:_ This setting enables `Fastest` but also enables aggressive optimizations that may break strict standards compliance but should work well on well-behaved code. `-Ofast`\n\n- _Smallest, Aggressive Size Optimizations:_ This setting enables additional size savings by isolating repetitive code patterns into a compiler generated function. `-Oz`","type":"Enumeration","default_value":"s","category":"CodeGeneration","values":["0","1","2","3","s","fast","z"],"command_line_arguments":["-O$(value)"]},"LLVM_OPTIMIZATION_LEVEL_VAL_0":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"LLVM_OPTIMIZATION_LEVEL_VAL_1":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"LLVM_OPTIMIZATION_LEVEL_VAL_2":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"LLVM_OPTIMIZATION_LEVEL_VAL_3":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"LLVM_OPTIMIZATION_LEVEL_VAL_s":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"LLVM_OPTIMIZATION_LEVEL_VAL_fast":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"LLVM_OPTIMIZATION_LEVEL_VAL_z":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"LLVM_IMPLICIT_AGGRESSIVE_OPTIMIZATIONS":{"name":null,"description":null,"type":"Boolean","default_value":"$(LLVM_OPTIMIZATION_LEVEL_VAL_$(GCC_OPTIMIZATION_LEVEL))","category":null,"values":null,"command_line_arguments":null},"LLVM_LTO":{"name":"Link-Time Optimization","description":"Enabling this setting allows optimization across file boundaries during linking.\n\n- _No:_ Disabled. Do not use link-time optimization.\n\n- _Monolithic Link-Time Optimization:_ This mode performs monolithic link-time optimization of binaries, combining all executable code into a single unit and running aggressive compiler optimizations.\n\n- _Incremental Link-Time Optimization:_ This mode performs partitioned link-time optimization of binaries, inlining between compilation units and running aggressive compiler optimizations on each unit in parallel. This enables fast incremental builds and uses less memory than Monolithic LTO.","type":"Enumeration","default_value":"NO","category":"CodeGeneration","values":["YES","YES_THIN","NO"],"command_line_arguments":{"YES":["-flto"],"YES_THIN":["-flto=thin"],"NO":[]}},"GCC_NO_COMMON_BLOCKS":{"name":"No Common Blocks","description":"In C, allocate even uninitialized global variables in the data section of the object file, rather than generating them as common blocks. This has the effect that if the same variable is declared (without `extern`) in two different compilations, you will get an error when you link them.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-fno-common"],"NO":[]}},"GCC_REUSE_STRINGS":{"name":"Make Strings Read-Only","description":"Reuse string literals.","type":"Boolean","default_value":"YES","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":[],"NO":["-fwritable-strings"]}},"GCC_DYNAMIC_NO_PIC":{"name":"Generate Position-Dependent Code","description":"Faster function calls for applications. Not appropriate for shared libraries, which need to be position-independent.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-mdynamic-no-pic"],"NO":[]}},"GCC_ENABLE_KERNEL_DEVELOPMENT":{"name":"Kernel Development Mode","description":"Activating this setting enables kernel development mode.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-mkernel"],"NO":[]}},"GCC_TREAT_WARNINGS_AS_ERRORS":{"name":"Treat Warnings as Errors","description":"Enabling this option causes all warnings to be treated as errors.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS":{"name":"Treat Missing Function Prototypes as Errors","description":"Causes warnings about missing function prototypes to be treated as errors. Only applies to C and Objective-C.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Werror=implicit-function-declaration"],"NO":[]}},"GCC_TREAT_INCOMPATIBLE_POINTER_TYPE_WARNINGS_AS_ERRORS":{"name":"Treat Incompatible Pointer Type Warnings as Errors","description":"Enabling this option causes warnings about incompatible pointer types to be treated as errors.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Werror=incompatible-pointer-types"],"NO":[]}},"GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS":{"name":"Missing Fields in Structure Initializers","description":"Warn if a structure's initializer has some fields missing. For example, the following code would cause such a warning because `x.h` is implicitly zero:\n\n`struct s { int f, g, h; };``struct s x = { 3, 4 };`\n\nThis option does not warn about designated initializers, so the following modification would not trigger a warning:\n\n`struct s { int f, g, h; };``struct s x = { .f = 3, .g = 4 };`","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wmissing-field-initializers"],"NO":["-Wno-missing-field-initializers"]}},"GCC_WARN_ABOUT_MISSING_PROTOTYPES":{"name":"Missing Function Prototypes","description":"Causes warnings to be emitted about missing prototypes.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wmissing-prototypes"],"NO":["-Wno-missing-prototypes"]}},"GCC_WARN_ABOUT_RETURN_TYPE":{"name":"Mismatched Return Type","description":"Causes warnings to be emitted when a function with a defined return type (not `void`) contains a return statement without a return-value or when it does not contain any return statements. Also emits a warning when a function with a void return type tries to return a value.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","NO","YES_ERROR"],"command_line_arguments":{"YES":[],"NO":["-Wno-return-type"],"YES_ERROR":["-Werror=return-type"]}},"CLANG_WARN_DOCUMENTATION_COMMENTS":{"name":"Documentation Comments","description":"Warns about issues in documentation comments (`doxygen`-style) such as missing or incorrect documentation tags.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wdocumentation"],"NO":[]}},"CLANG_WARN_UNREACHABLE_CODE":{"name":"Unreachable Code","description":"Warns about potentially unreachable code.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","YES_AGGRESSIVE","NO"],"command_line_arguments":{"YES":["-Wunreachable-code"],"NO":[],"YES_AGGRESSIVE":["-Wunreachable-code-aggressive"]}},"CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER":{"name":"Quoted Include In Framework Header","description":"Warns when a quoted include is used instead of a framework style include in a framework header.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wquoted-include-in-framework-header"],"NO":[],"YES_ERROR":["-Wquoted-include-in-framework-header","-Werror=quoted-include-in-framework-header"]}},"CLANG_WARN_NULLABLE_TO_NONNULL_CONVERSION":{"name":"Incorrect Uses of Nullable Values","description":"Warns when a nullable expression is used somewhere it’s not allowed, such as when passed as a `_Nonnull` parameter.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-Wnullable-to-nonnull-conversion"],"NO":[]}},"CLANG_WARN_OBJC_IMPLICIT_ATOMIC_PROPERTIES":{"name":"Implicit Atomic Objective-C Properties","description":"Warn about `@property` declarations that are implicitly atomic.","type":"Boolean","default_value":"NO","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wimplicit-atomic-properties"],"NO":["-Wno-implicit-atomic-properties"]}},"CLANG_WARN_DIRECT_OBJC_ISA_USAGE":{"name":"Direct usage of 'isa'","description":"Warn about direct accesses to the Objective-C `isa` pointer instead of using a runtime API.","type":"Enumeration","default_value":"YES","category":"WarningsObjC","values":["YES","NO","YES_ERROR"],"command_line_arguments":{"YES":[],"NO":["-Wno-deprecated-objc-isa-usage"],"YES_ERROR":["-Werror=deprecated-objc-isa-usage"]}},"CLANG_WARN_OBJC_INTERFACE_IVARS":{"name":"Interface Declarations of Instance Variables","description":"Warn about instance variable declarations in `@interface`.","type":"Enumeration","default_value":"NO","category":"WarningsObjC","values":["NO","YES","YES_ERROR"],"command_line_arguments":{"NO":["-Wno-objc-interface-ivars"],"YES":["-Wobjc-interface-ivars"],"YES_ERROR":["-Werror=objc-interface-ivars"]}},"CLANG_WARN_OBJC_MISSING_PROPERTY_SYNTHESIS":{"name":"Implicit Synthesized Properties","description":"Starting in Xcode 4.4, Apple Clang will implicitly synthesize properties that are not explicitly synthesized using `@synthesize`. This setting warns about such implicit behavior, even though the property is still synthesized. This is essentially a backwards compatibility warning, or for those who wish to continue to explicitly use `@synthesize`.","type":"Boolean","default_value":"NO","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wobjc-missing-property-synthesis"],"NO":[]}},"CLANG_WARN_OBJC_ROOT_CLASS":{"name":"Unintentional Root Class","description":"Warn about classes that unintentionally do not subclass a root class, such as `NSObject`.","type":"Enumeration","default_value":"YES","category":"WarningsObjC","values":["YES","NO","YES_ERROR"],"command_line_arguments":{"YES":[],"NO":["-Wno-objc-root-class"],"YES_ERROR":["-Werror=objc-root-class"]}},"CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK":{"name":"Repeatedly using a __weak reference","description":"Warn about repeatedly using a weak reference without assigning the weak reference to a strong reference. This is often symptomatic of a race condition where the weak reference can become `nil` between accesses, resulting in unexpected behavior. Assigning to temporary strong reference ensures the object stays alive during the related accesses.","type":"Enumeration","default_value":"NO","category":"WarningsObjCARC","values":["YES","NO","YES_AGGRESSIVE"],"command_line_arguments":{"NO":["-Wno-arc-repeated-use-of-weak"],"YES":["-Warc-repeated-use-of-weak","-Wno-arc-maybe-repeated-use-of-weak"],"YES_AGGRESSIVE":["-Warc-repeated-use-of-weak","-Warc-maybe-repeated-use-of-weak"]}},"CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE":{"name":"Implicit ownership types on out parameters","description":"Warn about implicit ownership types on Objective-C object references as out parameters. For example, declaring a parameter with type `NSObject**` will produce a warning because the compiler will assume that the out parameter's ownership type is `__autoreleasing`.","type":"Boolean","default_value":"NO","category":"WarningsObjCARC","values":null,"command_line_arguments":{"YES":["-Wexplicit-ownership-type"],"NO":[]}},"CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF":{"name":"Implicit retain of 'self' within blocks","description":"Warn about implicit retains of `self` within blocks, which can create a retain-cycle.","type":"Boolean","default_value":"NO","category":"WarningsObjCARC","values":null,"command_line_arguments":{"YES":["-Wimplicit-retain-self"],"NO":[]}},"GCC_WARN_NON_VIRTUAL_DESTRUCTOR":{"name":"Nonvirtual Destructor","description":"Warn when a class declares an nonvirtual destructor that should probably be virtual, because it looks like the class will be used polymorphically. This is only active for C++ or Objective-C++ sources.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Wnon-virtual-dtor"],"NO":["-Wno-non-virtual-dtor"]}},"GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS":{"name":"Overloaded Virtual Functions","description":"Warn when a function declaration hides virtual functions from a base class.\n\nFor example, in the following example, the `A` class version of `f()` is hidden in `B`.\n\n`struct A {`` virtual void f();``};``struct B: public A {`` void f(int);``};`\n\nAs a result, the following code will fail to compile.\n\n`B* b;``b-\u0026gt;f();`\n\nThis setting only applies to C++ and Objective-C++ sources.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Woverloaded-virtual"],"NO":["-Wno-overloaded-virtual"]}},"CLANG_WARN__EXIT_TIME_DESTRUCTORS":{"name":"Exit-Time C++ Destructors","description":"Warn about destructors for C++ objects that are called when an application is terminating.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Wexit-time-destructors"],"NO":["-Wno-exit-time-destructors"]}},"CLANG_WARN__ARC_BRIDGE_CAST_NONARC":{"name":"Using __bridge Casts Outside of ARC","description":"Warn about using `__bridge` casts when not using ARC, where they have no effect.","type":"Boolean","default_value":"YES","category":"WarningsObjCARC","values":null,"command_line_arguments":{"YES":[],"NO":["-Wno-arc-bridge-casts-disallowed-in-nonarc"]}},"CLANG_WARN__DUPLICATE_METHOD_MATCH":{"name":"Duplicate Method Definitions","description":"Warn about declaring the same method more than once within the same `@interface`.","type":"Boolean","default_value":"NO","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wduplicate-method-match"],"NO":[]}},"GCC_WARN_TYPECHECK_CALLS_TO_PRINTF":{"name":"Typecheck Calls to printf/scanf","description":"Check calls to `printf` and `scanf` to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense.","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":[],"NO":["-Wno-format"]}},"GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED":{"name":"Initializer Not Fully Bracketed","description":"Warn if an aggregate or union initializer is not fully bracketed. In the following example, the initializer for `a` is not fully bracketed, but the initializer for `b` is fully bracketed.\n\n`int a`2``2` = { 0, 1, 2, 3 };``int b`2``2` = { { 0, 1 }, { 2, 3 } };`","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wmissing-braces"],"NO":["-Wno-missing-braces"]}},"GCC_WARN_MISSING_PARENTHESES":{"name":"Missing Braces and Parentheses","description":"Warn if parentheses are omitted in certain contexts, such as when there is an assignment in a context where a truth value is expected, or when operators are nested whose precedence causes confusion. Also, warn about constructions where there may be confusion as to which `if` statement an `else` branch belongs. For example:\n\n`{`` if (a)`` if (b)`` foo ();`` else`` bar ();``}`\n\nIn C, every `else` branch belongs to the innermost possible `if` statement, which in the example above is `if (b)`. This is often not what the programmer expects, as illustrated by indentation used in the example above. This build setting causes GCC to issue a warning when there is the potential for this confusion. To eliminate the warning, add explicit braces around the innermost `if` statement so there is no way the `else` could belong to the enclosing `if`. For example:\n\n`{`` if (a)`` {`` if (b)`` foo ();`` else`` bar ();`` }``}`","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wparentheses"],"NO":["-Wno-parentheses"]}},"GCC_WARN_CHECK_SWITCH_STATEMENTS":{"name":"Check Switch Statements","description":"Warn whenever a switch statement has an index of enumeral type and lacks a case for one or more of the named codes of that enumeration. The presence of a default label prevents this warning. Case labels outside the enumeration range also provoke warnings when this option is used.","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wswitch"],"NO":["-Wno-switch"]}},"GCC_WARN_UNUSED_FUNCTION":{"name":"Unused Functions","description":"Warn whenever a static function is declared but not defined or a noninline static function is unused.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wunused-function"],"NO":["-Wno-unused-function"]}},"GCC_WARN_UNUSED_LABEL":{"name":"Unused Labels","description":"Warn whenever a label is declared but not used.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wunused-label"],"NO":["-Wno-unused-label"]}},"CLANG_WARN_EMPTY_BODY":{"name":"Empty Loop Bodies","description":"Warn about loop bodies that are suspiciously empty.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wempty-body"],"NO":["-Wno-empty-body"]}},"GCC_WARN_UNINITIALIZED_AUTOS":{"name":"Uninitialized Variables","description":"Warn if a variable might be clobbered by a `setjmp` call or if an automatic variable is used without prior initialization.\n\nThe compiler may not detect all cases where an automatic variable is initialized or all usage patterns that may lead to use prior to initialization. You can toggle between the normal uninitialized value checking or the more aggressive (conservative) checking, which finds more issues but the checking is much stricter.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","YES_AGGRESSIVE","NO"],"command_line_arguments":{"YES":["-Wuninitialized"],"NO":["-Wno-uninitialized"],"YES_AGGRESSIVE":["-Wuninitialized","-Wconditional-uninitialized"]}},"GCC_WARN_UNKNOWN_PRAGMAS":{"name":"Unknown Pragma","description":"Warn when a `#pragma` directive is encountered that is not understood by GCC. If this command line option is used, warnings will even be issued for unknown pragmas in system header files. This is not the case if the warnings were only enabled by the `-Wall` command-line option.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wunknown-pragmas"],"NO":["-Wno-unknown-pragmas"]}},"GCC_WARN_INHIBIT_ALL_WARNINGS":{"name":"Inhibit All Warnings","description":"Inhibit all warning messages.","type":"Boolean","default_value":"NO","category":"WarningsPolicy","values":null,"command_line_arguments":{"YES":["-w"],"NO":[]}},"GCC_WARN_PEDANTIC":{"name":"Pedantic Warnings","description":"Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++. For ISO C, follows the version of the ISO C standard specified by any `-std` option used.","type":"Boolean","default_value":"NO","category":"WarningsPolicy","values":null,"command_line_arguments":{"YES":["-pedantic"],"NO":[]}},"GCC_WARN_SHADOW":{"name":"Hidden Local Variables","description":"Warn whenever a local variable shadows another local variable, parameter or global variable or whenever a builtin function is shadowed.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wshadow"],"NO":["-Wno-shadow"]}},"GCC_WARN_FOUR_CHARACTER_CONSTANTS":{"name":"Four Character Literals","description":"Warn about four-char literals (for example, macOS-style `OSTypes`: `'APPL'`).","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wfour-char-constants"],"NO":["-Wno-four-char-constants"]}},"CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION":{"name":"Suspicious Implicit Conversions","description":"Warn about various implicit conversions that can lose information or are otherwise suspicious.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wconversion"],"NO":["-Wno-conversion"],"YES_ERROR":["-Werror=conversion"]}},"CLANG_WARN_CONSTANT_CONVERSION":{"name":"Implicit Constant Conversions","description":"Warn about implicit conversions of constant values that cause the constant value to change, either through a loss of precision, or entirely in its meaning.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wconstant-conversion"],"NO":["-Wno-constant-conversion"],"YES_ERROR":["-Werror=constant-conversion"]}},"CLANG_WARN_INT_CONVERSION":{"name":"Implicit Integer to Pointer Conversions","description":"Warn about implicit conversions between pointers and integers. For example, this can catch issues when one incorrectly intermixes using `NSNumber*`'s and raw integers.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wint-conversion"],"NO":["-Wno-int-conversion"],"YES_ERROR":["-Werror=int-conversion"]}},"CLANG_WARN_BOOL_CONVERSION":{"name":"Implicit Boolean Conversions","description":"Warn about implicit conversions to boolean values that are suspicious. For example, writing `if (foo)` where `foo` is the name a function will trigger a warning.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wbool-conversion"],"NO":["-Wno-bool-conversion"],"YES_ERROR":["-Werror=bool-conversion"]}},"CLANG_WARN_ENUM_CONVERSION":{"name":"Implicit Enum Conversions","description":"Warn about implicit conversions between different kinds of enum values. For example, this can catch issues when using the wrong enum flag as an argument to a function or method.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wenum-conversion"],"NO":["-Wno-enum-conversion"],"YES_ERROR":["-Werror=enum-conversion"]}},"CLANG_WARN_FLOAT_CONVERSION":{"name":"Implicit Float Conversions","description":"Warn about implicit conversions that turn floating-point numbers into integers.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wfloat-conversion"],"NO":["-Wno-float-conversion"],"YES_ERROR":["-Werror=float-conversion"]}},"CLANG_WARN_NON_LITERAL_NULL_CONVERSION":{"name":"Implicit Non-Literal Null Conversions","description":"Warn about non-literal expressions that evaluate to zero being treated as a null pointer.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wnon-literal-null-conversion"],"NO":["-Wno-non-literal-null-conversion"],"YES_ERROR":["-Werror=non-literal-null-conversion"]}},"CLANG_WARN_OBJC_LITERAL_CONVERSION":{"name":"Implicit Objective-C Literal Conversions","description":"Warn about implicit conversions from Objective-C literals to values of incompatible type.","type":"Enumeration","default_value":"$(CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION)","category":"WarningsObjC","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wobjc-literal-conversion"],"NO":["-Wno-objc-literal-conversion"],"YES_ERROR":["-Werror=objc-literal-conversion"]}},"CLANG_WARN_MISSING_NOESCAPE":{"name":"Missing Noescape Annotation","description":"Warn about noescape annotations that are missing in a method's signature.","type":"Enumeration","default_value":"YES","category":"WarningsObjC","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":[],"NO":["-Wno-missing-noescape"],"YES_ERROR":["-Werror=missing-noescape"]}},"CLANG_WARN_PRAGMA_PACK":{"name":"Suspicious Pragma Pack","description":"Warn when a translation unit is missing terminating '#pragma pack (pop)' directives or when the '#pragma pack' state immediately after an #include is different from the state immediately before.","type":"Enumeration","default_value":"YES","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":[],"NO":["-Wno-pragma-pack"],"YES_ERROR":["-Werror=pragma-pack"]}},"CLANG_WARN_PRIVATE_MODULE":{"name":"Outdated Private Module Map","description":"Warn about private modules that do not use the recommended private module layout.","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":[],"NO":["-Wno-private-module"]}},"CLANG_WARN_VEXING_PARSE":{"name":"Ambiguous C++ Parsing Situation","description":"Warn about a parsing ambiguity between a variable declaration and a function-style cast.","type":"Enumeration","default_value":"YES","category":"WarningsCXX","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":[],"NO":["-Wno-vexing-parse"],"YES_ERROR":["-Werror=vexing-parse"]}},"CLANG_WARN_DELETE_NON_VIRTUAL_DTOR":{"name":"Deleting Instance of Polymorphic Class with No Virtual Destructor","description":"Warn when deleting an instance of a polymorphic class with virtual functions but without a virtual destructor.","type":"Enumeration","default_value":"YES","category":"WarningsCXX","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":[],"NO":["-Wno-delete-non-virtual-dtor"],"YES_ERROR":["-Werror=delete-non-virtual-dtor"]}},"CLANG_WARN_ASSIGN_ENUM":{"name":"Out-of-Range Enum Assignments","description":"Warn about assigning integer constants to enum values that are out of the range of the enumerated type.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wassign-enum"],"NO":[]}},"GCC_WARN_SIGN_COMPARE":{"name":"Sign Comparison","description":"Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wsign-compare"],"NO":[]}},"GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-Wselector"],"NO":["-Wno-selector"]}},"GCC_WARN_STRICT_SELECTOR_MATCH":{"name":"Strict Selector Matching","description":"Warn if multiple methods with differing argument and/or return types are found for a given selector when attempting to send a message using this selector to a receiver of type `id` or `Class`. When this setting is disabled, the compiler will omit such warnings if any differences found are confined to types that share the same size and alignment.","type":"Boolean","default_value":"NO","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wstrict-selector-match"],"NO":["-Wno-strict-selector-match"]}},"GCC_WARN_UNDECLARED_SELECTOR":{"name":"Undeclared Selector","description":"Warn if a `@selector(...)` expression referring to an undeclared selector is found. A selector is considered undeclared if no method with that name has been declared before the `@selector(...)` expression, either explicitly in an `@interface` or `@protocol` declaration, or implicitly in an `@implementation` section. This option always performs its checks as soon as a `@selector(...)` expression is found, while `-Wselector` only performs its checks in the final stage of compilation. This also enforces the coding style convention that methods and selectors must be declared before being used.","type":"Boolean","default_value":"NO","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wundeclared-selector"],"NO":["-Wno-undeclared-selector"]}},"CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS":{"name":"Overriding Deprecated Objective-C Methods","description":"Warn if an Objective-C class either subclasses a deprecated class or overrides a method that has been marked deprecated or unavailable.","type":"Boolean","default_value":"NO","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wdeprecated-implementations"],"NO":["-Wno-deprecated-implementations"]}},"CLANG_WARN_CXX0X_EXTENSIONS":{"name":"Using C++11 extensions in earlier versions of C++","description":"When compiling C++ code using a language standard older than C++11, warn about the use of C++11 extensions.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Wc++11-extensions"],"NO":["-Wno-c++11-extensions"]}},"CLANG_WARN_ATOMIC_IMPLICIT_SEQ_CST":{"name":"Usage of implicit sequentially-consistent atomics","description":"Warns when an atomic is used with an implicitly sequentially-consistent memory order, instead of explicitly specifying memory order.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Watomic-implicit-seq-cst"],"NO":[]}},"CLANG_TRIVIAL_AUTO_VAR_INIT":{"name":"Trivial automatic variable initialization","description":"Specify whether stack variables should be uninitialized, which can cause inadvertent information disclosure when uninitialized stack variables are used, or whether they should be pattern-initialized.","type":"Enumeration","default_value":"uninitialized","category":null,"values":["uninitialized","pattern"],"command_line_arguments":{"pattern":["-ftrivial-auto-var-init=pattern"],"uninitialized":[]}},"WARNING_CFLAGS":{"name":"Other Warning Flags","description":"Space-separated list of additional warning flags to pass to the compiler. Use this setting if Xcode does not already provide UI for a particular compiler warning flag.","type":"StringList","default_value":"","category":"CustomFlags","values":null,"command_line_arguments":null},"GCC_PREPROCESSOR_DEFINITIONS":{"name":"Preprocessor Macros","description":"Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.","type":"StringList","default_value":"","category":"Preprocessing","values":null,"command_line_arguments":["-D$(value)"]},"GCC_PRODUCT_TYPE_PREPROCESSOR_DEFINITIONS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":["-D$(value)"]},"GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS":{"name":"Preprocessor Macros Not Used In Precompiled Headers","description":"Space-separated list of preprocessor macros of the form `foo` or `foo=bar`. These macros are not used when precompiling a prefix header file.","type":"StringList","default_value":"","category":"Preprocessing","values":null,"command_line_arguments":null},"ENABLE_NS_ASSERTIONS":{"name":"Enable Foundation Assertions","description":"Controls whether assertion logic provided by `NSAssert` is included in the preprocessed source code or is elided during preprocessing. Disabling assertions can improve code performance.","type":"Boolean","default_value":"YES","category":"Preprocessing","values":null,"command_line_arguments":{"YES":[],"NO":["-DNS_BLOCK_ASSERTIONS=1"]}},"ENABLE_STRICT_OBJC_MSGSEND":{"name":"Enable Strict Checking of objc_msgSend Calls","description":"Controls whether `objc_msgSend` calls must be cast to the appropriate function pointer type before being called.","type":"Boolean","default_value":"NO","category":"Preprocessing","values":null,"command_line_arguments":{"NO":["-DOBJC_OLD_DISPATCH_PROTOTYPES=1"],"YES":["-DOBJC_OLD_DISPATCH_PROTOTYPES=0"]}},"USE_HEADERMAP":{"name":"Use Header Maps","description":"Enable the use of _Header Maps_, which provide the compiler with a mapping from textual header names to their locations, bypassing the normal compiler header search path mechanisms. This allows source code to include headers from various locations in the file system without needing to update the header search path build settings.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"HEADERMAP_FILE_FORMAT":{"name":null,"description":null,"type":"Enumeration","default_value":"traditional","category":null,"values":["traditional"],"command_line_arguments":null},"CPP_HEADERMAP_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME).hmap","category":null,"values":null,"command_line_arguments":null},"CPP_HEADERMAP_FILE_FOR_GENERATED_FILES":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME)-generated-files.hmap","category":null,"values":null,"command_line_arguments":null},"CPP_HEADERMAP_FILE_FOR_OWN_TARGET_HEADERS":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME)-own-target-headers.hmap","category":null,"values":null,"command_line_arguments":null},"CPP_HEADERMAP_FILE_FOR_ALL_TARGET_HEADERS":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME)-all-target-headers.hmap","category":null,"values":null,"command_line_arguments":null},"CPP_HEADERMAP_FILE_FOR_ALL_NON_FRAMEWORK_TARGET_HEADERS":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME)-all-non-framework-target-headers.hmap","category":null,"values":null,"command_line_arguments":null},"CPP_HEADERMAP_FILE_FOR_PROJECT_FILES":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME)-project-headers.hmap","category":null,"values":null,"command_line_arguments":null},"CPP_HEADERMAP_PRODUCT_HEADERS_VFS_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(PROJECT_TEMP_DIR)/all-product-headers.yaml","category":null,"values":null,"command_line_arguments":null},"USE_HEADER_SYMLINKS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"CPP_HEADER_SYMLINKS_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)/$(PRODUCT_NAME).hdrs","category":null,"values":null,"command_line_arguments":null},"SDKROOT":{"name":"Base SDK","description":"The name or path of the base SDK being used during the build. The product will be built against the headers and libraries located inside the indicated SDK. This path will be prepended to all search paths, and will be passed through the environment to the compiler and linker. Additional SDKs can be specified in the [Additional SDKs (ADDITIONAL\\_SDKS)](itcaec37c2a6.html#deva1a5b1b82) setting.","type":"Path","default_value":"","category":"Architectures","values":null,"command_line_arguments":null},"GCC_USE_GCC3_PFE_SUPPORT":{"name":null,"description":null,"type":"Boolean","default_value":"$(USE_GCC3_PFE_SUPPORT)","category":null,"values":null,"command_line_arguments":null},"GCC_PFE_FILE_C_DIALECTS":{"name":null,"description":null,"type":"StringList","default_value":"c objective-c c++ objective-c++","category":null,"values":null,"command_line_arguments":null},"ENABLE_APPLE_KEXT_CODE_GENERATION":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-fapple-kext"],"NO":[]}},"GCC_WARN_UNUSED_PARAMETER":{"name":"Unused Parameters","description":"Warn whenever a function parameter is unused aside from its declaration.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wunused-parameter"],"NO":["-Wno-unused-parameter"]}},"GCC_WARN_UNUSED_VARIABLE":{"name":"Unused Variables","description":"Warn whenever a local variable or nonconstant static variable is unused aside from its declaration.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wunused-variable"],"NO":["-Wno-unused-variable"]}},"GCC_WARN_UNUSED_VALUE":{"name":"Unused Values","description":"Warn whenever a statement computes a result that is explicitly not used.","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wunused-value"],"NO":["-Wno-unused-value"]}},"GCC_ENABLE_EXCEPTIONS":{"name":"Enable Exceptions","description":"Enable exception handling. Generates extra code needed to propagate exceptions. For some targets, this implies GCC will generate frame unwind information for all functions, which can produce significant data size overhead, although it does not affect execution. If you do not specify this option, GCC will enable it by default for languages like C++ and Objective-C that normally require exception handling, and disable it for languages like C that do not normally require it. However, you may need to enable this option when compiling C code that needs to interoperate properly with exception handlers written in other languages. You may also wish to disable this option if you are compiling older programs that don't use exception handling.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"GCC_ENABLE_OBJC_EXCEPTIONS":{"name":"Enable Objective-C Exceptions","description":"This setting enables `@try`/`@catch`/`@throw` syntax for handling exceptions in Objective-C code. Only applies to Objective-C.","type":"Boolean","default_value":"YES","category":"LanguageObjC","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-objc-exceptions"]}},"GCC_CW_ASM_SYNTAX":{"name":"CodeWarrior/MS-Style Inline Assembly","description":"Enable the CodeWarrior/Microsoft syntax for inline assembly code in addition to the standard GCC syntax.","type":"Boolean","default_value":"YES","category":"Language","values":null,"command_line_arguments":{"YES":["-fasm-blocks"],"NO":[]}},"GCC_UNROLL_LOOPS":{"name":"Unroll Loops","description":"Unrolls loops. Unrolling makes the code larger, but may make it faster by reducing the number of branches executed.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-funroll-loops"],"NO":[]}},"GCC_FAST_MATH":{"name":"Relax IEEE Compliance","description":"Enables some floating point optimizations that are not IEEE754-compliant, but which usually work. Programs that require strict IEEE compliance may not work with this option.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-ffast-math"],"NO":[]}},"GCC_STRICT_ALIASING":{"name":"Enforce Strict Aliasing","description":"Optimize code by making more aggressive assumptions about whether pointers can point to the same objects as other pointers. Programs that use pointers a lot may benefit from this, but programs that don't strictly follow the ISO C rules about the type with which an object may be accessed may behave unexpectedly.","type":"Boolean","default_value":"YES","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-fstrict-aliasing"],"NO":["-fno-strict-aliasing"]}},"GCC_INSTRUMENT_PROGRAM_FLOW_ARCS":{"name":"Instrument Program Flow","description":"Activating this setting indicates that code should be added so program flow arcs are instrumented.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-fprofile-arcs"],"NO":[]}},"GCC_GENERATE_TEST_COVERAGE_FILES":{"name":"Generate Legacy Test Coverage Files","description":"Activating this setting causes a `notes` file to be produced that the `gcov` code-coverage utility can use to show program coverage.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-ftest-coverage"],"NO":[]}},"GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL":{"name":"Incomplete Objective-C Protocols","description":"Warn if methods required by a protocol are not implemented in the class adopting it. Only applies to Objective-C.","type":"Boolean","default_value":"YES","category":"WarningsObjC","values":null,"command_line_arguments":{"YES":["-Wprotocol"],"NO":["-Wno-protocol"]}},"GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS":{"name":"Deprecated Functions","description":"Warn about the use of deprecated functions, variables, and types (as indicated by the `deprecated` attribute).","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wdeprecated-declarations"],"NO":["-Wno-deprecated-declarations"]}},"GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO":{"name":"Undefined Use of offsetof Macro","description":"Unchecking this setting will suppress warnings from applying the `offsetof` macro to a non-POD type. According to the 1998 ISO C++ standard, applying `offsetof` to a non-POD type is undefined. In existing C++ implementations, however, `offsetof` typically gives meaningful results even when applied to certain kinds of non-POD types, such as a simple struct that fails to be a POD type only by virtue of having a constructor. This flag is for users who are aware that they are writing nonportable code and who have deliberately chosen to ignore the warning about it.\n\nThe restrictions on `offsetof` may be relaxed in a future version of the C++ standard.","type":"Boolean","default_value":"YES","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Winvalid-offsetof"],"NO":["-Wno-invalid-offsetof"]}},"GCC_MACOSX_VERSION_MIN":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-$(DEPLOYMENT_TARGET_CLANG_FLAG_NAME)=$(value)"]}},"GCC_DEBUG_INFORMATION_FORMAT":{"name":null,"description":null,"type":"Enumeration","default_value":"$(DEBUG_INFORMATION_FORMAT)","category":null,"values":["dwarf","dwarf-with-dsym"],"command_line_arguments":{"dwarf":["-g"],"dwarf-with-dsym":["-g"],"\u003c\u003cotherwise\u003e\u003e":[]}},"CLANG_DEBUG_INFORMATION_LEVEL":{"name":"Debug Information Level","description":"Toggles the amount of debug information emitted when debug symbols are enabled. This can impact the size of the generated debug information, which may matter in some cases for large projects, such as when using LTO.","type":"Enumeration","default_value":"default","category":"CodeGeneration","values":["default","line-tables-only"],"command_line_arguments":{"default":[],"line-tables-only":["-gline-tables-only"]}},"GCC_ENABLE_SSE3_EXTENSIONS":{"name":"Enable SSE3 Extensions","description":"Specifies whether the binary uses the builtin functions that provide access to the SSE3 extensions to the IA-32 architecture.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":[],"NO":[]}},"GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":[],"NO":[]}},"GCC_ENABLE_SSE41_EXTENSIONS":{"name":"Enable SSE4.1 Extensions","description":"Specifies whether the binary uses the builtin functions that provide access to the SSE4.1 extensions to the IA-32 architecture.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":[],"NO":[]}},"GCC_ENABLE_SSE42_EXTENSIONS":{"name":"Enable SSE4.2 Extensions","description":"Specifies whether the binary uses the builtin functions that provide access to the SSE4.2 extensions to the IA-32 architecture.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":[],"NO":[]}},"DEFAULT_SSE_LEVEL_3_YES":{"name":null,"description":null,"type":"String","default_value":"sse3","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_3_NO":{"name":null,"description":null,"type":"String","default_value":"default","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_3_SUPPLEMENTAL_YES":{"name":null,"description":null,"type":"String","default_value":"ssse3","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_3_SUPPLEMENTAL_NO":{"name":null,"description":null,"type":"String","default_value":"$(DEFAULT_SSE_LEVEL_3_$(GCC_ENABLE_SSE3_EXTENSIONS))","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_4_1_YES":{"name":null,"description":null,"type":"String","default_value":"sse4.1","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_4_1_NO":{"name":null,"description":null,"type":"String","default_value":"$(DEFAULT_SSE_LEVEL_3_SUPPLEMENTAL_$(GCC_ENABLE_SUPPLEMENTAL_SSE3_INSTRUCTIONS))","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_4_2_YES":{"name":null,"description":null,"type":"String","default_value":"sse4.2","category":null,"values":null,"command_line_arguments":null},"DEFAULT_SSE_LEVEL_4_2_NO":{"name":null,"description":null,"type":"String","default_value":"$(DEFAULT_SSE_LEVEL_4_1_$(GCC_ENABLE_SSE41_EXTENSIONS))","category":null,"values":null,"command_line_arguments":null},"CLANG_X86_VECTOR_INSTRUCTIONS":{"name":"Enable Additional Vector Extensions","description":"Enables the use of extended vector instructions. Only used when targeting Intel architectures.","type":"Enumeration","default_value":"$(DEFAULT_SSE_LEVEL_4_2_$(GCC_ENABLE_SSE42_EXTENSIONS))","category":"CodeGeneration","values":["default","sse3","ssse3","sse4.1","sse4.2","avx","avx2","avx512"],"command_line_arguments":{"default":[],"avx512":["-march=skylake-avx512"],"\u003c\u003cotherwise\u003e\u003e":["-m$(value)"]}},"GCC_SYMBOLS_PRIVATE_EXTERN":{"name":"Symbols Hidden by Default","description":"When enabled, all symbols are declared `private extern` unless explicitly marked to be exported using ` __attribute__ ((visibility(\"default\")))` in code. If not enabled, all symbols are exported unless explicitly marked as `private extern`. See [Controlling Symbol Visibility](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/Articles/SymbolVisibility.html#//apple_ref/doc/uid/TP40001670-CJBGBHEJ) in [C++ Runtime Environment Programming Guide](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/CppRuntimeEnv/CPPRuntimeEnv.html).","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-fvisibility=hidden"],"NO":[]}},"GCC_INLINES_ARE_PRIVATE_EXTERN":{"name":"Inline Methods Hidden","description":"When enabled, out-of-line copies of inline methods are declared `private extern`.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-fvisibility-inlines-hidden"],"NO":[]}},"GCC_THREADSAFE_STATICS":{"name":"Statics are Thread-Safe","description":"Emits extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics. You can disable this option to reduce code size slightly in code that doesn't need to be thread-safe.","type":"Boolean","default_value":"YES","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":[],"NO":["-fno-threadsafe-statics"]}},"GCC_WARN_ABOUT_POINTER_SIGNEDNESS":{"name":"Pointer Sign Comparison","description":"Warn when pointers passed via arguments or assigned to a variable differ in sign.","type":"Boolean","default_value":"YES","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wpointer-sign"],"NO":["-Wno-pointer-sign"]}},"GCC_WARN_ABOUT_MISSING_NEWLINE":{"name":"Missing Newline At End Of File","description":"Warn when a source file does not end with a newline.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wnewline-eof"],"NO":["-Wno-newline-eof"]}},"CLANG_WARN_IMPLICIT_SIGN_CONVERSION":{"name":"Implicit Signedness Conversions","description":"Warn about implicit integer conversions that change the signedness of an integer value.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wsign-conversion"],"NO":["-Wno-sign-conversion"],"YES_ERROR":["-Werror=sign-conversion"]}},"GCC_WARN_64_TO_32_BIT_CONVERSION":{"name":"Implicit Conversion to 32 Bit Type","description":"Warn if a value is implicitly converted from a 64-bit type to a 32-bit type. This is a subset of the warnings provided by -Wconversion.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","YES_ERROR","NO"],"command_line_arguments":{"YES":["-Wshorten-64-to-32"],"NO":["-Wno-shorten-64-to-32"],"YES_ERROR":["-Werror=shorten-64-to-32"]}},"CLANG_WARN_INFINITE_RECURSION":{"name":"Infinite Recursion","description":"Warn if all paths through a function call itself.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Winfinite-recursion"],"NO":["-Wno-infinite-recursion"]}},"CLANG_WARN_SUSPICIOUS_MOVE":{"name":"Suspicious Moves","description":"Warn about suspicious uses of `std::move`.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Wmove"],"NO":["-Wno-move"]}},"CLANG_WARN_COMMA":{"name":"Suspicious Commas","description":"Warn about suspicious uses of the comma operator.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","NO","YES_ERROR"],"command_line_arguments":{"YES":["-Wcomma"],"NO":["-Wno-comma"],"YES_ERROR":["-Werror=comma"]}},"CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING":{"name":"Block Capture of Autoreleasing","description":"Warn about block captures of implicitly autoreleasing parameters.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","NO","YES_ERROR"],"command_line_arguments":{"YES":["-Wblock-capture-autoreleasing"],"NO":["-Wno-block-capture-autoreleasing"],"YES_ERROR":["-Werror=block-capture-autoreleasing"]}},"CLANG_WARN_STRICT_PROTOTYPES":{"name":"Strict Prototypes","description":"Warn about non-prototype declarations.","type":"Enumeration","default_value":"NO","category":"Warnings","values":["YES","NO","YES_ERROR"],"command_line_arguments":{"YES":["-Wstrict-prototypes"],"NO":["-Wno-strict-prototypes"],"YES_ERROR":["-Werror=strict-prototypes"]}},"CLANG_WARN_RANGE_LOOP_ANALYSIS":{"name":"Range-based For Loops","description":"Warn about ranged-based for loops.","type":"Boolean","default_value":"NO","category":"WarningsCXX","values":null,"command_line_arguments":{"YES":["-Wrange-loop-analysis"],"NO":["-Wno-range-loop-analysis"]}},"CLANG_WARN_SEMICOLON_BEFORE_METHOD_BODY":{"name":"Semicolon Before Method Body","description":"Warn about ignored semicolon between a method implementation's signature and body.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":{"YES":["-Wsemicolon-before-method-body"],"NO":["-Wno-semicolon-before-method-body"]}},"CLANG_WARN_UNGUARDED_AVAILABILITY":{"name":"Unguarded availability","description":"Warn if an API that is newer than the deployment target is used without \"if (@available(...))\" guards.","type":"Enumeration","default_value":"YES","category":"Warnings","values":["YES","YES_AGGRESSIVE","NO"],"command_line_arguments":{"YES":[],"NO":["-Wno-unguarded-availability"],"YES_AGGRESSIVE":["-Wunguarded-availability"]}},"GCC_OBJC_ABI_VERSION":{"name":null,"description":null,"type":"Enumeration","default_value":"$(OBJC_ABI_VERSION)","category":null,"values":["1","2"],"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-fobjc-abi-version=$(value)"]}},"GCC_OBJC_LEGACY_DISPATCH":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-fobjc-legacy-dispatch"],"NO":[]}},"CLANG_INSTRUMENT_FOR_OPTIMIZATION_PROFILING":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-fprofile-instr-generate"],"NO":[]}},"CLANG_OPTIMIZATION_PROFILE_FILE":{"name":"Optimization Profile File","description":"The path to the file of the profile data to use when [Use Optimization Profile (CLANG\\_USE\\_OPTIMIZATION\\_PROFILE)](itcaec37c2a6.html#devb3d935f24) is enabled.","type":"Path","default_value":"$(SRCROOT)/OptimizationProfiles/$(PROJECT_NAME).profdata","category":"CodeGeneration","values":null,"command_line_arguments":null},"CLANG_USE_OPTIMIZATION_PROFILE":{"name":"Use Optimization Profile","description":"When this setting is enabled, `clang` will use the optimization profile collected for a target when building it.","type":"Boolean","default_value":"NO","category":"CodeGeneration","values":null,"command_line_arguments":{"YES":["-fprofile-instr-use=$(CLANG_OPTIMIZATION_PROFILE_FILE)"],"NO":[]}},"CLANG_ENABLE_CODE_COVERAGE":{"name":"Enable Code Coverage Support","description":"Enables building with code coverage instrumentation. This is only used when the build has code coverage enabled, which is typically done via the Xcode scheme settings.","type":"Boolean","default_value":"YES","category":"CodeGeneration","values":null,"command_line_arguments":null},"CLANG_COVERAGE_MAPPING":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-profile-coverage-mapping","-profile-generate"],"NO":[]}},"CLANG_COVERAGE_MAPPING_LINKER_ARGS":{"name":null,"description":null,"type":"Boolean","default_value":"$(CLANG_COVERAGE_MAPPING)","category":null,"values":null,"command_line_arguments":null},"CLANG_ADDRESS_SANITIZER":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_ADDRESS_SANITIZER)","category":null,"values":null,"command_line_arguments":{"YES":["-fsanitize=address"],"NO":[]}},"CLANG_ADDRESS_SANITIZER_CONTAINER_OVERFLOW":{"name":"Enable C++ Container Overflow Checks","description":"Check for C++ container overflow when Address Sanitizer is enabled. This check requires the entire application to be built with Address Sanitizer. If not, it may report false positives.","type":"Boolean","default_value":"NO","category":"ASANPolicy","values":null,"command_line_arguments":{"YES":[],"NO":["-D_LIBCPP_HAS_NO_ASAN"]}},"CLANG_ADDRESS_SANITIZER_USE_AFTER_SCOPE":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-fsanitize-address-use-after-scope"],"NO":[]}},"CLANG_ADDRESS_SANITIZER_ALLOW_ERROR_RECOVERY":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_ADDRESS_SANITIZER_ALLOW_ERROR_RECOVERY)","category":null,"values":null,"command_line_arguments":{"YES":["-fsanitize-recover=address"],"NO":[]}},"CLANG_UNDEFINED_BEHAVIOR_SANITIZER":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_UNDEFINED_BEHAVIOR_SANITIZER)","category":null,"values":null,"command_line_arguments":{"YES":["-fsanitize=undefined","-fno-sanitize=enum,return,float-divide-by-zero,function,vptr"],"NO":[]}},"CLANG_UNDEFINED_BEHAVIOR_SANITIZER_INTEGER":{"name":"Enable Extra Integer Checks","description":"Check for unsigned integer overflow, in addition to checks for signed integer overflow.","type":"Boolean","default_value":"NO","category":"UBSANPolicy","values":null,"command_line_arguments":{"YES":["-fsanitize=integer"],"NO":[]}},"CLANG_UNDEFINED_BEHAVIOR_SANITIZER_NULLABILITY":{"name":"Enable Nullability Annotation Checks","description":"Check for violations of nullability annotations in function calls, return statements, and assignments.","type":"Boolean","default_value":"NO","category":"UBSANPolicy","values":null,"command_line_arguments":{"YES":["-fsanitize=nullability"],"NO":[]}},"CLANG_INDEX_STORE_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(INDEX_DATA_STORE_DIR)","category":null,"values":null,"command_line_arguments":null},"CLANG_INDEX_STORE_ENABLE":{"name":null,"description":null,"type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":[]},"CLANG_ARC_MIGRATE_PRECHECK":{"name":null,"description":null,"type":"Enumeration","default_value":"donothing","category":null,"values":["donothing","precheck"],"command_line_arguments":{"donothing":[],"precheck":["-ccc-arcmt-check"]}},"CLANG_ARC_MIGRATE_DIR":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CLANG_OBJC_MIGRATE_DIR":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CLANG_ARC_MIGRATE_EMIT_ERROR":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-arcmt-migrate-emit-errors"],"NO":[]}},"CLANG_ARC_MIGRATE_REPORT_OUTPUT":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CLANG_ANALYZER_EXEC":{"name":null,"description":null,"type":"Path","default_value":"clang","category":null,"values":null,"command_line_arguments":null},"CLANG_ANALYZER_DEFINES":{"name":null,"description":null,"type":"String","default_value":"-D__clang_analyzer__","category":null,"values":null,"command_line_arguments":["$(value)"]},"CLANG_ANALYZER_OUTPUT_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_DIR)","category":null,"values":null,"command_line_arguments":null},"CLANG_ANALYZER_OUTPUT":{"name":null,"description":null,"type":"Enumeration","default_value":"plist-multi-file","category":null,"values":["default","plist-multi-file"],"command_line_arguments":{"default":[],"\u003c\u003cotherwise\u003e\u003e":["-Xclang","-analyzer-output=$(value)"]}},"CLANG_ANALYZER_ALTERNATE_EDGES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"NO":["-Xclang","-analyzer-config","-Xclang","path-diagnostics-alternate=false"],"YES":["-Xclang","-analyzer-config","-Xclang","path-diagnostics-alternate=true"]}},"CLANG_ANALYZER_REPORT_MAIN_SOURCE_FILE":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"NO":[],"YES":["-Xclang","-analyzer-config","-Xclang","report-in-main-source-file=true"]}},"RUN_CLANG_STATIC_ANALYZER":{"name":"Analyze During 'Build'","description":"Activating this setting will cause Xcode to run the `Clang` static analysis tool on qualifying source files during every build.","type":"Boolean","default_value":"NO","category":"SAPolicy","values":null,"command_line_arguments":null},"CLANG_STATIC_ANALYZER_MODE_ACTION_shallow":{"name":null,"description":null,"type":"String","default_value":"Shallow","category":null,"values":null,"command_line_arguments":null},"CLANG_STATIC_ANALYZER_MODE_ACTION_deep":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"CLANG_STATIC_ANALYZER_MODE":{"name":"Mode of Analysis for 'Build'","description":"The depth the static analyzer uses during the Build action. Use `Deep` to exercise the full power of the analyzer. Use `Shallow` for faster analysis.","type":"Enumeration","default_value":"shallow","category":"SAPolicy","values":["shallow","deep"],"command_line_arguments":{"shallow":["-Xclang","-analyzer-config","-Xclang","mode=shallow"],"deep":[]}},"CLANG_STATIC_ANALYZER_MODE_ON_ANALYZE_ACTION":{"name":"Mode of Analysis for 'Analyze'","description":"The depth the static analyzer uses during the Analyze action. Use `Deep` to exercise the full power of the analyzer. Use `Shallow` for faster analysis.","type":"Enumeration","default_value":"deep","category":"SAPolicy","values":["shallow","deep"],"command_line_arguments":null},"CLANG_ANALYZER_DEADCODE_DEADSTORES":{"name":"Dead Stores","description":"Check for values stored to variables and never read again.","type":"Boolean","default_value":"YES","category":"SACheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","deadcode.DeadStores"]}},"CLANG_ANALYZER_OBJC_COLLECTIONS":{"name":"Misuse of Collections API","description":"Warn if `CF` collections are created with non-pointer-size values. Check if `NS` collections are initialized with non-Objective-C type elements.","type":"Boolean","default_value":"YES","category":"SAAppleAPICheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.coreFoundation.containers.PointerSizedValues","-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.VariadicMethodTypes","-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.NilArg"]}},"CLANG_ANALYZER_OBJC_NSCFERROR":{"name":"Improper Handling of CFError and NSError","description":"Warn if functions accepting `CFErrorRef` or `NSError` cannot indicate that an error occurred.","type":"Boolean","default_value":"YES","category":"SAAppleAPICheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.coreFoundation.CFError","-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.NSError"]}},"CLANG_ANALYZER_OBJC_INCOMP_METHOD_TYPES":{"name":"Method Signatures Mismatch","description":"Warn about Objective-C method signatures with type incompatibilities.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.IncompatibleMethodTypes"]}},"CLANG_ANALYZER_OBJC_UNUSED_IVARS":{"name":"Unused Ivars","description":"Warn about private ivars that are never used.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.UnusedIvars"]}},"CLANG_ANALYZER_OBJC_GENERICS":{"name":"Misuse of Objective-C generics","description":"Warn if a specialized generic type is converted to an incompatible type.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.ObjCGenerics"]}},"CLANG_ANALYZER_MALLOC":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"CLANG_ANALYZER_MEMORY_MANAGEMENT":{"name":"Improper Memory Management","description":"Warn about memory leaks, use-after-free, and other API misuses.","type":"Boolean","default_value":"$(CLANG_ANALYZER_MALLOC)","category":"SACheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","unix.Malloc","-Xclang","-analyzer-disable-checker","-Xclang","unix.MallocSizeof","-Xclang","-analyzer-disable-checker","-Xclang","unix.MismatchedDeallocator","-Xclang","-analyzer-disable-checker","-Xclang","cplusplus.NewDelete"]}},"CLANG_ANALYZER_OBJC_RETAIN_COUNT":{"name":"Violation of Reference Counting Rules","description":"Warn on leaks and improper reference count management.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.RetainCount","-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.ClassRelease"]}},"CLANG_ANALYZER_OBJC_ATSYNC":{"name":"@synchronized with nil mutex","description":"Warn on `nil` pointers used as mutexes for `@synchronized`.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.AtSync"]}},"CLANG_ANALYZER_OBJC_DEALLOC":{"name":"Improper Instance Cleanup in '-dealloc'","description":"Warn when an instance is improperly cleaned up in `-dealloc`.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.Dealloc"]}},"CLANG_ANALYZER_GCD":{"name":"Misuse of Grand Central Dispatch","description":"Check for misuses of the Grand Central Dispatch API.","type":"Boolean","default_value":"YES","category":"SAAppleAPICheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.API"]}},"CLANG_ANALYZER_NONNULL":{"name":"Misuse of 'nonnull'","description":"Check for misuses of `nonnull` parameter and return types.","type":"Enumeration","default_value":"YES_NONAGGRESSIVE","category":"SACheckers","values":["YES","YES_NONAGGRESSIVE","NO"],"command_line_arguments":{"YES":[],"YES_NONAGGRESSIVE":["-Xclang","-analyzer-config","-Xclang","nullability:NoDiagnoseCallsToSystemHeaders=true"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","nullability"]}},"CLANG_ANALYZER_USE_AFTER_MOVE":{"name":"Use-After-Move Errors in C++","description":"Warn when a C++ object is used after it has been moved from.","type":"Enumeration","default_value":"YES_AGGRESSIVE","category":"SACheckers","values":["YES_AGGRESSIVE","YES","NO"],"command_line_arguments":{"YES":["-Xclang","-analyzer-config","-Xclang","cplusplus.Move:WarnOn=KnownsOnly"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","cplusplus.Move"],"YES_AGGRESSIVE":[]}},"CLANG_ANALYZER_MIG_CONVENTIONS":{"name":"Violation of Mach Interface Generator Conventions","description":"Warn when a MIG routine violates memory management conventions.","type":"Enumeration","default_value":"YES","category":"SAAppleAPICheckers","values":["YES","NO"],"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.MIG"]}},"CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION":{"name":"Suspicious Conversions of NSNumber and CFNumberRef","description":"Warn when a number object, such as an instance of `NSNumber`, `CFNumberRef`, `OSNumber`, or `OSBoolean` is compared or converted to a primitive value instead of another object.","type":"Enumeration","default_value":"YES","category":"SAAppleAPICheckers","values":["YES_AGGRESSIVE","YES","NO"],"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.NumberObjectConversion"],"YES_AGGRESSIVE":["-Xclang","-analyzer-config","-Xclang","osx.NumberObjectConversion:Pedantic=true"]}},"CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED":{"name":"Missing Localizability","description":"Warn when a nonlocalized string is passed to a user interface method expecting a localized string.","type":"Enumeration","default_value":"NO","category":"SAAppleAPICheckers","values":["YES","NO"],"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","optin.osx.cocoa.localizability.NonLocalizedStringChecker"],"NO":[]}},"CLANG_ANALYZER_LOCALIZABILITY_EMPTY_CONTEXT":{"name":"Missing Localization Context Comment","description":"Warn when a call to an `NSLocalizedString()` macro is missing a context comment for the localizer.","type":"Enumeration","default_value":"NO","category":"SAAppleAPICheckers","values":["YES","NO"],"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","optin.osx.cocoa.localizability.EmptyLocalizationContextChecker"],"NO":[]}},"CLANG_ANALYZER_GCD_PERFORMANCE":{"name":"Performance Anti-Patterns with Grand Central Dispatch","description":"Check for Grand Central Dispatch idioms that may lead to poor performance.","type":"Enumeration","default_value":"NO","category":"SAAppleAPICheckers","values":["YES","NO"],"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","optin.performance.GCDAntipattern"],"NO":[]}},"CLANG_ANALYZER_OBJC_SELF_INIT":{"name":"Violation of 'self = `super init`' Rule","description":"Check that `super init` is properly called within an Objective-C initialization method.","type":"Boolean","default_value":"YES","category":"SAObjCCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.cocoa.SelfInit"]}},"CLANG_ANALYZER_LIBKERN_RETAIN_COUNT":{"name":"Violation of IOKit and libkern Reference Counting Rules","description":"Finds leaks and overreleases associated with objects inheriting from OSObject","type":"Boolean","default_value":"YES","category":"SAAppleAPICheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-config","-Xclang","osx.cocoa.RetainCount:CheckOSObject=false"]}},"CLANG_ANALYZER_SECURITY_KEYCHAIN_API":{"name":"Misuse of Keychain Services API","description":"Check for leaks of keychain attribute lists and data buffers returned by the Keychain Services API.","type":"Boolean","default_value":"YES","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":[],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","osx.SecKeychainAPI"]}},"CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER":{"name":"Floating Point Value Used as Loop Counter","description":"Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP).","type":"Boolean","default_value":"NO","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.FloatLoopCounter"],"NO":[]}},"CLANG_ANALYZER_SECURITY_INSECUREAPI_UNCHECKEDRETURN":{"name":"Unchecked Return Values","description":"Warn on uses of sensitive functions whose return values must be always checked.","type":"Boolean","default_value":"YES","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.UncheckedReturn"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.UncheckedReturn"]}},"CLANG_ANALYZER_SECURITY_INSECUREAPI_GETPW_GETS":{"name":"Use of 'getpw', 'gets' (Buffer Overflow)","description":"Warn on uses of `getpw` and `gets`. The functions are dangerous as they may trigger a buffer overflow.","type":"Boolean","default_value":"YES","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.getpw","-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.gets"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.getpw","-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.gets"]}},"CLANG_ANALYZER_SECURITY_INSECUREAPI_MKSTEMP":{"name":"Use of 'mktemp' or Predictable 'mktemps'","description":"Warn on uses of `mktemp`, which produces predictable temporary files. It is obsoleted by `mktemps`. Warn when `mkstemp` is passed fewer than 6 `X`'s in the format string.","type":"Boolean","default_value":"YES","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.mkstemp","-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.mktemp"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.mkstemp","-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.mktemp"]}},"CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND":{"name":"Use of 'rand' Functions","description":"Warn on uses of `rand`, `random`, and related functions, which produce predictable random number sequences. Use `arc4random` instead.","type":"Boolean","default_value":"NO","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.rand"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.rand"]}},"CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY":{"name":"Use of 'strcpy' and 'strcat'","description":"Warn on uses of the `strcpy` and `strcat` functions, which can result in buffer overflows. Use `strlcpy` or `strlcat` instead.","type":"Boolean","default_value":"NO","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.strcpy"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.strcpy"]}},"CLANG_ANALYZER_SECURITY_INSECUREAPI_VFORK":{"name":"Use of 'vfork'","description":"Warn on uses of the `vfork` function, which is inherently insecure. Use the safer `posix_spawn` function instead.","type":"Boolean","default_value":"YES","category":"SASecurityCheckers","values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","security.insecureAPI.vfork"],"NO":["-Xclang","-analyzer-disable-checker","-Xclang","security.insecureAPI.vfork"]}},"CLANG_ANALYZER_SECURITY_BUFFER_OVERFLOW_EXPERIMENTAL":{"name":"*EXPERIMENTAL* Buffer overflows","description":"Check for potential buffer overflows.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-Xclang","-analyzer-checker","-Xclang","core.experimental.Overflow","-Xclang","-analyzer-checker","-Xclang","security.experimental.ArrayBoundV2","-Xclang","-analyzer-max-loop","-Xclang","100"],"NO":[]}},"CLANG_ANALYZER_OTHER_CHECKERS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":["-Xclang","-analyzer-checker","-Xclang","$(value)"]},"CLANG_ANALYZER_OTHER_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":["-Xclang","$(value)"]},"CLANG":{"name":null,"description":null,"type":"Path","default_value":"clang","category":null,"values":null,"command_line_arguments":null},"CLANG_MIGRATOR_READWRITE_PROPERTY":{"name":"Infer readwrite properties","description":"Infer readwrite properties from a getter and setter method.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-readwrite-property"],"NO":[]}},"CLANG_MIGRATOR_READONLY_PROPERTY":{"name":"Infer readonly properties","description":"Infer readonly properties from getter methods.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-readonly-property"],"NO":[]}},"CLANG_MIGRATOR_ANNOTATIONS":{"name":"Add attribute annotations","description":"Add attribute annotations to properties and methods.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-annotation"],"NO":[]}},"CLANG_MIGRATOR_INSTANCE_TYPE":{"name":"Infer instancetype for method result type","description":"Infer `instancetype` for method result type instead of `id`.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-instancetype"],"NO":[]}},"CLANG_MIGRATOR_NSENUM_MACROS":{"name":"Use NS_ENUM/NS_OPTIONS macros","description":"Use `NS_ENUM`/`NS_OPTIONS` macros for enumerators.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-ns-macros"],"NO":[]}},"CLANG_MIGRATOR_PROTOCOL_CONFORMANCE":{"name":"Infer protocol conformance","description":"Infer protocol conformance from the interface methods.","type":"Boolean","default_value":"NO","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-protocol-conformance"],"NO":[]}},"CLANG_MIGRATOR_PROPERTY_ATOMICITY":{"name":"Atomicity of inferred properties","description":"Choose the atomicity of the inferred properties.","type":"Enumeration","default_value":"NS_NONATOMIC_IOSONLY","category":"Modernizer","values":["nonatomic","atomic","NS_NONATOMIC_IOSONLY"],"command_line_arguments":{"nonatomic":[],"atomic":["-objcmt-atomic-property"],"NS_NONATOMIC_IOSONLY":["-objcmt-ns-nonatomic-iosonly"]}},"CLANG_MIGRATOR_PUBLIC_HEADERS_ONLY":{"name":"Only modify public headers","description":"Only modify public headers of a target.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-white-list-dir-path=$(TARGET_BUILD_DIR)/$(PUBLIC_HEADERS_FOLDER_PATH)"],"NO":[]}},"CLANG_MIGRATOR_OBJC_LITERALS":{"name":"ObjC literals","description":"Enable migration to modern ObjC literals syntax.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-literals","-Qunused-arguments"],"NO":[]}},"CLANG_MIGRATOR_PROPERTY_DOT_SYNTAX":{"name":"ObjC property-dot syntax","description":"Enable migration of setter/getter messages to property-dot syntax.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-property-dot-syntax"],"NO":[]}},"CLANG_MIGRATOR_OBJC_SUBSCRIPTING":{"name":"ObjC subscripting","description":"Enable migration to modern ObjC subscripting syntax.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-subscripting","-Qunused-arguments"],"NO":[]}},"CLANG_MIGRATOR_OBJC_DESIGNATED_INIT":{"name":"Infer designated initializer methods","description":"Infer `NS_DESIGNATED_INITIALIZER` for designated initializer methods.","type":"Boolean","default_value":"YES","category":"Modernizer","values":null,"command_line_arguments":{"YES":["-objcmt-migrate-designated-init","-Qunused-arguments"],"NO":[]}},"Texture Atlas Format":{"name":null,"description":null,"type":"Enumeration","default_value":"RGBA8888_PNG","category":"SpriteKit Texture Atlas Options","values":[{"Value":"RGBA8888_PNG","CommandLineArgs":[]},{"Value":"RGBA8888_COMPRESSED","CommandLineArgs":["-f 2"]},{"Value":"RGBA4444_COMPRESSED","CommandLineArgs":["-f 3"]},{"Value":"RGBA5551_COMPRESSED","CommandLineArgs":["-f 4"]},{"Value":"RGB565_COMPRESSED","CommandLineArgs":["-f 5"]}],"command_line_arguments":null},"Texture Atlas Maximum Size":{"name":null,"description":null,"type":"Enumeration","default_value":"2048x2048","category":"SpriteKit Texture Atlas Options","values":[{"Value":"2048x2048","CommandLineArgs":[]},{"Value":"4096x4096","CommandLineArgs":["-s 2"]}],"command_line_arguments":null},"Enable Warnings":{"name":null,"description":null,"type":"Enumeration","default_value":"Yes","category":"USDZ Compiler Options","values":[{"Value":"Yes","CommandLineArgs":[]},{"Value":"No","CommandLineArgs":["-g"]}],"command_line_arguments":null},"RCPROJECT_CODEGEN_LANGUAGE":{"name":"RC Generation Language","description":"The Source-code language to use for generated RC objects. By default Xcode will generate Swift types that represent the objects in your scene. Adjust this setting to explicitly select \"Swift\", or select \"None\" to disable RC object generation.","type":"enum","default_value":"Swift","category":"Code Generation","values":["Swift","Automatic","None"],"command_line_arguments":null},"RCPROJECT_CODEGEN_SWIFT_VERSION":{"name":null,"description":null,"type":"String","default_value":"$(SWIFT_VERSION)","category":"Code Generation","values":null,"command_line_arguments":null},"Other RC Project Compiler flags":{"name":null,"description":null,"type":"StringList","default_value":"","category":"RC Project Compiler Options","values":null,"command_line_arguments":null},"Other Skybox Compiler flags":{"name":null,"description":null,"type":"StringList","default_value":"","category":"Skybox Compiler Options","values":null,"command_line_arguments":null},"ENABLE_USDZ_COMPILATION":{"name":"Enable Compilation","description":null,"type":"Boolean","default_value":"NO","category":"USDZ Compiler Options","values":null,"command_line_arguments":{"YES":[],"NO":["--skip"]}},"Other USDZ Compiler flags":{"name":null,"description":null,"type":"StringList","default_value":"","category":"USDZ Compiler Options","values":null,"command_line_arguments":null},"PLATFORM_NAME":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SCENEKIT_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":null},"XCODE_DEVELOPER_DIR_PATH":{"name":null,"description":null,"type":"path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"TARGET_BUILD_DIR":{"name":null,"description":"Identifies the root of the directory hierarchy that contains the product’s files (no intermediate build files). Run Script build phases that operate on product files of the target that defines them should use the value of this build setting, but Run Script build phases that operate on product files of other targets should use `BUILT_PRODUCTS_DIR` instead.","type":"Path","default_value":"$(CONFIGURATION_BUILD_DIR)$(TARGET_BUILD_SUBPATH)","category":null,"values":null,"command_line_arguments":null},"UNLOCALIZED_RESOURCES_FOLDER_PATH":{"name":null,"description":"Specifies the directory that contains the product’s unlocalized resources.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"TARGET_TEMP_DIR":{"name":null,"description":"Identifies the directory containing the target’s intermediate build files. Run Script build phases should place intermediate files at the location indicated by `DERIVED_FILE_DIR`, not the directory identified by this build setting.","type":"Path","default_value":"$(CONFIGURATION_TEMP_DIR)/$(TARGET_NAME).build","category":null,"values":null,"command_line_arguments":null},"IBSC_FLATTEN_NIBS":{"name":"Flatten Compiled Storyboard Files","description":"Compiles a Storyboard file into flattened (non-wrapper) Storyboard file. After flattening, the resulting Storyboard is more compact but no longer editable by Interface Builder. When this option is disabled, the resulting Storyboard file remains editable in Interface Builder.","type":"Boolean","default_value":"YES","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":{"YES":[],"NO":["--flatten","NO"]}},"IBSC_ERRORS":{"name":"Show Errors","description":"Show errors encountered during the compilation of Storyboard files.","type":"Boolean","default_value":"YES","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBSC_WARNINGS":{"name":"Show Warnings","description":"Show warnings encountered during the compilation of Storyboard files.","type":"Boolean","default_value":"YES","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBSC_NOTICES":{"name":"Show Notices","description":"Show notices encountered during the compilation of Storyboard files.","type":"Boolean","default_value":"YES","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBSC_OTHER_FLAGS":{"name":"Other Storyboard Compiler Flags","description":"A list of additional flags to pass to the Interface Builder Compiler. Use this setting if Xcode does not already provide UI for a particular Interface Builder Compiler flag.","type":"StringList","default_value":"","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"RESOURCES_PLATFORM_NAME":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"RESOURCES_TARGETED_DEVICE_FAMILY":{"name":"Resources Targeted Device Family","description":"Overrides [Targeted Device Family (TARGETED\\_DEVICE\\_FAMILY)](itcaec37c2a6.html#dev2f2f7890b) when the resource copying needs to differ from the default targeted device.","type":"StringList","default_value":null,"category":"Deployment","values":null,"command_line_arguments":null},"IBSC_REGIONS_AND_STRINGS_FILES":{"name":null,"description":null,"type":"StringList","default_value":"$(IBC_REGIONS_AND_STRINGS_FILES)","category":null,"values":null,"command_line_arguments":null},"IBSC_MODULE":{"name":"Default Module","description":"Defines the module name for Swift classes referenced without a specific module name.","type":"String","default_value":"$(PRODUCT_MODULE_NAME)","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"STORYBOARD_COMPILER_INFOPLIST_CONTENT_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/$(InputFileRegionPathComponent)$(InputFileBase)-SBPartialInfo.plist","category":null,"values":null,"command_line_arguments":null},"IBSC_COMPILER_AUTO_ACTIVATE_CUSTOM_FONTS":{"name":"Auto-Activate Custom Fonts","description":"Instructs the Storyboard compiler to add custom fonts to the application's `Info.plist` that will cause the fonts to activate upon application launch.","type":"Boolean","default_value":"YES","category":"IBSC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBSC_COMPILER_USE_NIBARCHIVES_FOR_MACOS":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["--use-nibarchives-for-macos","$(value)"]}},"IBC_STRIP_NIBS":{"name":"Strip NIB Files","description":"Strips an Interface Builder NIB to reduce its size for deployment. The resulting NIB is more compact but no longer editable by Interface Builder. When this option is disabled, the resulting NIB file remains editable by Interface Builder.","type":"Boolean","default_value":"$(IBC_FLATTEN_NIBS)","category":"IBC_POSTPROCESSOR_OPTIONS","values":null,"command_line_arguments":{"YES":["--strip","$(ProductResourcesDir)/$(InputFileBase).nib"],"NO":["--write","$(ProductResourcesDir)/$(InputFileBase).nib"]}},"IBC_REGIONS_AND_STRINGS_FILES":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"ASSETCATALOG_OUTPUT_FORMAT":{"name":null,"description":null,"type":"Enumeration","default_value":"human-readable-text","category":null,"values":["human-readable-text"],"command_line_arguments":["--output-format","$(value)"]},"ASSETCATALOG_NOTICES":{"name":"Show Notices","description":"Show notices encountered during the compilation of asset catalogs.","type":"Boolean","default_value":"YES","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ASSETCATALOG_WARNINGS":{"name":"Show Warnings","description":"Show warnings encountered during the compilation of asset catalogs.","type":"Boolean","default_value":"YES","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ASSETCATALOG_OTHER_FLAGS":{"name":"Asset Catalog Other Flags","description":"Pass additional flags through to the asset catalog compiler.","type":"StringList","default_value":"","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_DEPENDENCY_INFO_FILE":{"name":null,"description":null,"type":"String","default_value":"$(TARGET_TEMP_DIR)/assetcatalog_dependencies","category":null,"values":null,"command_line_arguments":["--export-dependency-info","$(value)"]},"ASSETCATALOG_COMPILER_INFOPLIST_CONTENT_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/assetcatalog_generated_info.plist","category":null,"values":null,"command_line_arguments":["--output-partial-info-plist","$(value)"]},"ASSETCATALOG_COMPILER_STICKER_PACK_STRINGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_APPICON_NAME":{"name":"Asset Catalog App Icon Set Name","description":"Name of an asset catalog app icon set whose contents will be merged into the `Info.plist`.","type":"String","default_value":null,"category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME":{"name":"Asset Catalog Launch Image Set Name","description":"Name of an asset catalog launch image set whose contents will be merged into the `Info.plist`.","type":"String","default_value":null,"category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"RESOURCES_UI_FRAMEWORK_FAMILY":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_COMPRESS_PNGS":{"name":null,"description":null,"type":"bool","default_value":"$(COMPRESS_PNG_FILES)","category":null,"values":null,"command_line_arguments":{"YES":["--compress-pngs"],"NO":[]}},"ASSETCATALOG_COMPILER_ENABLE_ON_DEMAND_RESOURCES":{"name":null,"description":null,"type":"bool","default_value":"$(ENABLE_ON_DEMAND_RESOURCES)","category":null,"values":null,"command_line_arguments":["--enable-on-demand-resources","$(value)"]},"ENABLE_ONLY_ACTIVE_RESOURCES":{"name":"Build Active Resources Only","description":"Omit inapplicable resources when building for a single device. For example, when building for a device with a Retina display, exclude 1x resources.","type":"bool","default_value":"YES","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"ENABLE_INCREMENTAL_DISTILL":{"name":"Enable Incremental Distill","description":"Enabled the incremental `distill` option in the asset catalog compiler. This feature is experimental and should only be enabled with caution.","type":"bool","default_value":"NO","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":["--enable-incremental-distill","$(value)","--target-name","$(TARGET_NAME)"]},"ASSETCATALOG_COMPILER_OPTIMIZATION":{"name":"Optimization","description":"With no value, the compiler uses the default optimization. You can also specify `time` to optimize for speed of access or `space` to optimize for a smaller compiled asset catalogs.","type":"Enumeration","default_value":"","category":"ASSETCATALOG_COMPILER_OPTIONS","values":["","time","space"],"command_line_arguments":["--optimization","$(value)"]},"ASSETCATALOG_FILTER_FOR_DEVICE_MODEL":{"name":null,"description":null,"type":"String","default_value":"$(TARGET_DEVICE_MODEL)","category":null,"values":null,"command_line_arguments":null},"ASSETCATALOG_FILTER_FOR_DEVICE_OS_VERSION":{"name":null,"description":null,"type":"String","default_value":"$(TARGET_DEVICE_OS_VERSION)","category":null,"values":null,"command_line_arguments":null},"ASSETCATALOG_COMPILER_STICKER_PACK_IDENTIFIER_PREFIX":{"name":"Sticker Pack Identifier Prefix","description":"Sticker Packs in the asset catalog may optionally specify an identifier. If they do not, their name will be prefixed by this value to form an automatically generated identifier.","type":"String","default_value":"$(PRODUCT_BUNDLE_IDENTIFIER).sticker-pack.","category":"ASSETCATALOG_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"DEVELOPMENT_LANGUAGE":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"IBC_FLATTEN_NIBS":{"name":"Flatten Compiled XIB Files","description":"If enabled, compile XIB files into flattened (non-wrapper) NIB files. After flattening, the resulting NIB is more compact but no longer editable by Interface Builder. When this option is disabled, the resulting NIB file remains editable in Interface Builder.","type":"Boolean","default_value":"YES","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":{"YES":[],"NO":["--flatten","NO"]}},"IBC_ERRORS":{"name":"Show Errors","description":"Show errors encountered during the compilation of XIB files.","type":"Boolean","default_value":"YES","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBC_WARNINGS":{"name":"Show Warnings","description":"Show warnings encountered during the compilation of XIB files.","type":"Boolean","default_value":"YES","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBC_NOTICES":{"name":"Show Notices","description":"Show notices encountered during the compilation of XIB files.","type":"Boolean","default_value":"YES","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBC_OTHER_FLAGS":{"name":"Other Interface Builder Compiler Flags","description":"A list of additional flags to pass to the Interface Builder Compiler. Use this setting if Xcode does not already provide UI for a particular Interface Builder Compiler flag.","type":"StringList","default_value":"","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBC_PLUGINS":{"name":"Plug-Ins","description":"A list of paths to Interface Builder plugins to load when compiling XIB files.","type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"IBC_PLUGIN_SEARCH_PATHS":{"name":"Plug-In Search Paths","description":"A list of paths to be searched for Interface Builder plug-ins to load when compiling XIB files.","type":"PathList","default_value":"","category":null,"values":null,"command_line_arguments":null},"IBC_MODULE":{"name":"Default Module","description":"Defines the module name for Swift classes referenced without a specific module name.","type":"String","default_value":"$(PRODUCT_MODULE_NAME)","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBC_OVERRIDING_PLUGINS_AND_FRAMEWORKS_DIR":{"name":"Overriding Plug-In and Framework Directory","description":"Instructs Interface Builder to load frameworks and Interface Builder plugins from the specified directory. Setting this value to `$(BUILD_DIR)/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)` will ensure that Interface Builder will load frameworks and plug-ins from the built products directory of the current build configuration.","type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"XIB_COMPILER_INFOPLIST_CONTENT_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/$(InputFileRegionPathComponent)$(InputFileBase)-PartialInfo.plist","category":null,"values":null,"command_line_arguments":null},"IBC_COMPILER_AUTO_ACTIVATE_CUSTOM_FONTS":{"name":"Auto-Activate Custom Fonts","description":"Instructs the XIB compiler to add custom fonts to the application's `Info.plist`, which will cause the fonts to activate upon application launch.","type":"Boolean","default_value":"YES","category":"IBC_COMPILER_OPTIONS","values":null,"command_line_arguments":null},"IBC_COMPILER_USE_NIBARCHIVES_FOR_MACOS":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["--use-nibarchives-for-macos","$(value)"]}},"IBSC_STRIP_NIBS":{"name":"Strip Storyboardc Files","description":"Strips an editable Interface Builder storyboardc file to reduce its size for deployment. The resulting storyboardc is more compact but no longer editable by Interface Builder. When this option is disabled, the resulting storyboardc file remains editable by Interface Builder.","type":"Boolean","default_value":"$(IBSC_FLATTEN_NIBS)","category":"IBSC_POSTPROCESSOR_OPTIONS","values":null,"command_line_arguments":{"YES":["--strip","$(ProductResourcesDir)/$(InputFileBase).storyboardc"],"NO":["--write","$(ProductResourcesDir)/$(InputFileBase).storyboardc"]}},"CPP_PREPROCESSOR_DEFINITIONS":{"name":"Cpp Preprocessor Definitions","description":"Space-separated list of preprocessor macros of the form `foo` or `foo=bar`. These macros are used when preprocessing using the standalone C Preprocessor rule.","type":"stringlist","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CPP_PREFIX_HEADER":{"name":"Cpp Prefix File","description":"Implicitly include the given file when preprocessing using the standalone C Preprocessor rule. The path given should either be a project relative path or an absolute path.","type":"string","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CPP_OTHER_PREPROCESSOR_FLAGS":{"name":"Cpp Other Preprocessor Flags","description":"Other flags to pass to the C preprocessor when using the standalone C Preprocessor rule.","type":"stringlist","default_value":null,"category":null,"values":null,"command_line_arguments":null},"OSACOMPILE_EXECUTE_ONLY":{"name":"Save as Execute-Only","description":"Saves the output script in execute-only form; the script can be run, but cannot be opened in Script Editor or Xcode. With this option turned off, a user may see the original script source by opening the script.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"OTHER_OSACOMPILEFLAGS":{"name":"Other OSACompile Flags","description":"Space-separated list of additional flags to pass to `osacompile`. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular `osacompile` flag.","type":"StringList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"LD_TARGET_TRIPLE_ARCHS":{"name":null,"description":null,"type":"StringList","default_value":"$(CURRENT_ARCH)","category":null,"values":null,"command_line_arguments":["-target","$(value)-$(LLVM_TARGET_TRIPLE_VENDOR)-$(LLVM_TARGET_TRIPLE_OS_VERSION)$(LLVM_TARGET_TRIPLE_SUFFIX)"]},"LD_TARGET_TRIPLE_VARIANTS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"LD_ADDITIONAL_DEPLOYMENT_TARGET_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":"$(value)"},"MACH_O_TYPE":{"name":"Mach-O Type","description":"This setting determines the format of the produced binary and how it can be linked when building other binaries. For information on binary types, see [Building Mach-O Files](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/building_files.html#//apple_ref/doc/uid/TP40001828-SW1) in [Mach-O Programming Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html).\n\n- _Executable:_ Executables and standalone binaries and cannot be linked. `mh_execute`\n\n- _Dynamic Library:_ Dynamic libraries are linked at build time and loaded automatically when needed. `mh_dylib`\n\n- _Bundle:_ Bundle libraries are loaded explicitly at run time. `mh_bundle`\n\n- _Static Library:_ Static libraries are linked at build time and loaded at execution time. `staticlib`\n\n- _Relocatable Object File:_ Object files are single-module files that are linked at build time. `mh_object`","type":"Enumeration","default_value":"","category":"Linking","values":[{"Value":"mh_execute"},{"Value":"mh_dylib"},{"Value":"mh_bundle"},{"Value":"staticlib"},{"Value":"mh_object"}],"command_line_arguments":null},"LIBRARY_SEARCH_PATHS":{"name":"Library Search Paths","description":"This is a list of paths to folders to be searched by the linker for libraries used by the product. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted.","type":"PathList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"FRAMEWORK_SEARCH_PATHS":{"name":"Framework Search Paths","description":"This is a list of paths to folders containing frameworks to be searched by the compiler for both included or imported header files when compiling C, Objective-C, C++, or Objective-C++, and by the linker for frameworks used by the product. Paths are delimited by whitespace, so any paths with spaces in them must be properly quoted.","type":"PathList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"SYSTEM_FRAMEWORK_SEARCH_PATHS":{"name":"System Framework Search Paths","description":"This is a list of paths to folders containing system frameworks to be searched by the compiler for both included or imported header files when compiling C, Objective-C, C++, or Objective-C++, and by the linker for frameworks used by the product. The order is from highest to lowest precedence. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted. This setting is very similar to \"Framework Search Paths\", except that the search paths are passed to the compiler in a way that suppresses most warnings for headers found in system search paths. If the compiler doesn't support the concept of system framework search paths, then the search paths are appended to any existing framework search paths defined in \"Framework Search Paths\".","type":"PathList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"PRODUCT_TYPE_LIBRARY_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"PRODUCT_TYPE_FRAMEWORK_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"LINKER_DISPLAYS_MANGLED_NAMES":{"name":"Display Mangled Names","description":"Activating this setting causes the linker to display mangled names for C++ symbols. Normally, this is not recommended, but turning it on can help to diagnose and solve C++ link errors.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"INIT_ROUTINE":{"name":"Initialization Routine","description":"This is the name of the routine to use for initialization.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"EXPORTED_SYMBOLS_FILE":{"name":"Exported Symbols File","description":"This is a project-relative path to a file that lists the symbols to export. See `ld -exported_symbols_list` for details on exporting symbols.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"UNEXPORTED_SYMBOLS_FILE":{"name":"Unexported Symbols File","description":"A project-relative path to a file that lists the symbols not to export. See `ld -exported_symbols_list` for details on exporting symbols.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"REEXPORTED_LIBRARY_NAMES":{"name":"Re-Exported Library Names","description":"List of library names that should have their symbols be reexported from the built library.","type":"StringList","default_value":null,"category":"Linking","values":null,"command_line_arguments":null},"REEXPORTED_LIBRARY_PATHS":{"name":"Re-Exported Library Paths","description":"List of library paths that should have their symbols be reexported from the built library.","type":"PathList","default_value":null,"category":"Linking","values":null,"command_line_arguments":null},"REEXPORTED_FRAMEWORK_NAMES":{"name":"Re-Exported Framework Names","description":"List of framework names that should have their symbols be reexported from the built library.","type":"StringList","default_value":null,"category":"Linking","values":null,"command_line_arguments":null},"GENERATE_PROFILING_CODE":{"name":"Generate Profiling Code","description":"Activating this setting will cause the compiler and linker to generate profiling code. For example, GCC will generate code suitable for use with `gprof(1)`.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"LD_NO_PIE":{"name":"Generate Position-Dependent Executable","description":"Activating this setting will prevent Xcode from building a main executable that is position independent (PIE). When targeting macOS 10.7 or later, PIE is the default for main executables, so activating this setting will change that behavior. When targeting OS X 10.6 or earlier, or when building for i386, PIE is not the default, so activating this setting does nothing.\n\nYou cannot create a PIE from `.o` files compiled with `-mdynamic-no-pic`. Using PIE means the codegen is less optimal, but the address randomization adds some security.","type":"bool","default_value":"NO","category":"Linking","values":null,"command_line_arguments":{"YES":["-Xlinker","-no_pie"],"NO":[]}},"LD_DYLIB_INSTALL_NAME":{"name":"Dynamic Library Install Name","description":"Sets an internal `install path` (`LC_ID_DYLIB`) in a dynamic library. Any clients linked against the library will record that path as the way `dyld` should locate this library. If this option is not specified, then the `-o` path will be used. This setting is ignored when building any product other than a dynamic library. See [Dynamic Library Programming Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).","type":"Path","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"LD_RUNPATH_SEARCH_PATHS":{"name":"Runpath Search Paths","description":"This is a list of paths to be added to the `runpath` search path list for the image being created. At runtime, `dyld` uses the `runpath` when searching for dylibs whose load path begins with `@rpath/`. See [Dynamic Library Programming Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"LD_GENERATE_MAP_FILE":{"name":"Write Link Map File","description":"Activating this setting will cause the linker to write a map file to disk, which details all symbols and their addresses in the output image. The path to the map file is defined by the [Path to Link Map File (LD\\_MAP\\_FILE\\_PATH)](itcaec37c2a6.html#dev0f5aa9fe1) setting.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"LD_MAP_FILE_PATH":{"name":"Path to Link Map File","description":"This setting defines the path to the map file written by the linker when the [Write Link Map File (LD\\_GENERATE\\_MAP\\_FILE)](itcaec37c2a6.html#devc1145996b) setting is activated. By default, a separate file will be written for each architecture and build variant, and these will be generated in the Intermediates directory for the target whose product is being linked.","type":"Path","default_value":"$(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt","category":"Linking","values":null,"command_line_arguments":null},"LINK_WITH_STANDARD_LIBRARIES":{"name":"Link With Standard Libraries","description":"When this setting is enabled, the compiler driver will automatically pass its standard libraries to the linker to use during linking. If desired, this flag can be used to disable linking with the standard libraries, and then individual libraries can be passed as [Other Linker Flags (OTHER\\_LDFLAGS)](itcaec37c2a6.html#dev4fc8ef90a).","type":"Boolean","default_value":"YES","category":"Linking","values":null,"command_line_arguments":null},"LD_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-$(DEPLOYMENT_TARGET_CLANG_FLAG_NAME)=$(value)"]}},"KEEP_PRIVATE_EXTERNS":{"name":"Preserve Private External Symbols","description":"Activating this setting will preserve private external symbols, rather than turning them into static symbols. This setting is also respected when performing a single-object prelink.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"DEAD_CODE_STRIPPING":{"name":"Dead Code Stripping","description":"Activating this setting causes the `-dead_strip` flag to be passed to `ld(1)` via `cc(1)` to turn on dead code stripping.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"PRESERVE_DEAD_CODE_INITS_AND_TERMS":{"name":"Don't Dead-Strip Inits and Terms","description":"Activating this setting, in combination with the [Dead Code Stripping (DEAD\\_CODE\\_STRIPPING)](itcaec37c2a6.html#dev9ed8cb7ad) (`-dead_strip`) option, causes the `-no_dead_strip_inits_and_terms` flag to be passed to `ld(1)` via `cc(1)` to disable dead code stripping for initialization and termination routines. This option should not be used without the aforementioned [Dead Code Stripping (DEAD\\_CODE\\_STRIPPING)](itcaec37c2a6.html#dev9ed8cb7ad) option.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"BUNDLE_LOADER":{"name":"Bundle Loader","description":"Specifies the executable that will load the bundle output file being linked. Undefined symbols from the bundle are checked against the specified executable as if it is one of the dynamic libraries the bundle was linked with.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"ORDER_FILE":{"name":"Order File","description":"The path to a file that alters the order in which functions and data are laid out.\n\nFor each section in the output file, any symbol in that section that are specified in the order file is moved to the start of its section and laid out in the same order as in the order file. Order files are text files with one symbol name per line. Lines starting with a `#` are comments. A symbol name may be optionally preceded with its object file leafname and a colon (for example, `foo.o:_foo`). This is useful for static functions/data that occur in multiple files. A symbol name may also be optionally preceded with the architecture (for example, `ppc:_foo` or `ppc:foo.o:_foo`). This enables you to have one order file that works for multiple architectures. Literal C-strings may be ordered by quoting the string in the order file (for example, `\"Hello, world\\n\"`).\n\nGenerally you should not specify an order file in Debug or Development configurations, as this will make the linked binary less readable to the debugger. Use them only in Release or Deployment configurations.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"LD_LTO_OBJECT_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_lto.o","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-Xlinker","-object_path_lto","-Xlinker","$(value)"]}},"LD_EXPORT_GLOBAL_SYMBOLS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-Xlinker","-export_dynamic"],"NO":[]}},"LD_DONT_RUN_DEDUPLICATION":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":["-Xlinker","-no_deduplicate"],"NO":[]}},"LD_OBJC_ABI_VERSION":{"name":null,"description":null,"type":"Enumeration","default_value":"$(OBJC_ABI_VERSION)","category":null,"values":["1","2"],"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-Xlinker","-objc_abi_version","-Xlinker","$(value)"]}},"LD_QUOTE_LINKER_ARGUMENTS_FOR_COMPILER_DRIVER":{"name":"Quote Linker Arguments","description":"This setting controls whether arguments to the linker should be quoted using `-Xlinker`. By default, Xcode invokes the linker by invoking the driver of the compiler used to build the source files in the target, and passing `-Xlinker` to quote arguments will cause the compiler driver to pass them through to the linker (rather than trying to evaluate them within the driver). By default, this setting is enabled. Disabling it will cause Xcode to not use `-Xlinker` to pass arguments to the linker. Disabling this setting is useful if the target has instructed Xcode to use an alternate linker (for example, by setting the `LD` setting to the path to another linker) and that alternate linker does not recognize `-Xlinker`.","type":"Boolean","default_value":"YES","category":"Linking","values":null,"command_line_arguments":null},"LD_DEBUG_VARIANT":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":["-Xlinker","-debug_variant"],"NO":[]}},"LD_FINAL_OUTPUT_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(INSTALL_PATH)/$(EXECUTABLE_PATH)","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-Xlinker","-final_output","-Xlinker","$(value)"]}},"LD_DEPENDENCY_INFO_FILE":{"name":"Path to Linker Dependency Info File","description":"This setting defines the path to which the linker should emit information about what files it used as inputs and generated. Xcode uses this information for its dependency tracking. Setting the value of this setting to empty will disable passing this option to the linker.","type":"Path","default_value":"$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_dependency_info.dat","category":null,"values":null,"command_line_arguments":null},"LD_DYLIB_ALLOWABLE_CLIENTS":{"name":"Dynamic Library Allowable Clients","description":"This setting restricts the clients allowed to link a dylib by passing `-allowable_client` to the linker for each supplied value.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"AdditionalCommandLineArguments":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"ALL_OTHER_LDFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"$(LD_FLAGS) $(SECTORDER_FLAGS) $(OTHER_LDFLAGS) $(OTHER_LDFLAGS_$(variant)) $(OTHER_LDFLAGS_$(arch)) $(OTHER_LDFLAGS_$(variant)_$(arch)) $(PRODUCT_SPECIFIC_LDFLAGS)","category":null,"values":null,"command_line_arguments":null},"OTHER_LDRFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"$(OTHER_LDFLAGS)","category":null,"values":null,"command_line_arguments":null},"ALTERNATE_LINKER":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-fuse-ld=$(value)"]}},"YACC_GENERATED_FILE_STEM":{"name":"Generated File Stem","description":"The file stem to use for the files generated by `yacc`. The files will be named `\u003cstem\u003e.tab.c` and `\u003cstem\u003e.tab.h` based on the value of this setting. The Standard (`y`) option will cause all `yacc` source files in the same target to produce the same output file, and it is not recommended for targets containing multiple `yacc` source files.","type":"enum","default_value":"Standard","category":"BuildOptions","values":["Standard","InputFileStem"],"command_line_arguments":null},"YACC_INSERT_LINE_DIRECTIVES":{"name":"Insert #line Directives","description":"Enabling this option causes `yacc` to insert the `#line` directives in the generated code. The `#line` directives let the C compiler relate errors in the generated code to the user's original code. If this option is disabled, `#line` directives specified by the user in the source file will still be retained.","type":"bool","default_value":"YES","category":"BuildOptions","values":null,"command_line_arguments":{"YES":[],"NO":["-l"]}},"YACC_GENERATE_DEBUGGING_DIRECTIVES":{"name":"Generate Debugging Directives","description":"Enabling this option changes the preprocessor directives generated by `yacc` so that debugging statements will be incorporated in the compiled code.","type":"bool","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-t"],"NO":[]}},"YACCFLAGS":{"name":"Other Yacc Flags","description":"Space-separated list of additional flags to pass to `yacc`. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a `yacc` flag.","type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"VALIDATE_PLIST_FILES_WHILE_COPYING":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"PLIST_FILE_OUTPUT_FORMAT":{"name":"Property List Output Encoding","description":"Specifies the output encoding for property list files (`.plist`). The output encodings can be `binary` or `XML`. By default, the output encoding will be unchanged from the input.","type":"Enumeration","default_value":"same-as-input","category":"Packaging","values":["same-as-input","XML","binary"],"command_line_arguments":null},"VERBOSE_PBXCP":{"name":null,"description":"Specifies whether the target’s Copy Files build phases generate additional information when copying files.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"REMOVE_CVS_FROM_RESOURCES":{"name":null,"description":"Specifies whether to remove `CVS` directories from bundle resources when they are copied.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"REMOVE_SVN_FROM_RESOURCES":{"name":null,"description":"Specifies whether to remove `SVN` directories from bundle resources when they are copied.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"REMOVE_GIT_FROM_RESOURCES":{"name":null,"description":"Specifies whether to remove `.git` directories from bundle resources when they are copied.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"REMOVE_HG_FROM_RESOURCES":{"name":null,"description":"Specifies whether to remove `.hg` directories from bundle resources when they are copied.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"REMOVE_HEADER_DIRECTORIES":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-exclude","Headers","-exclude","PrivateHeaders","-exclude","Modules","-exclude","*.tbd"],"NO":[]}},"COPY_PHASE_STRIP":{"name":"Strip Debug Symbols During Copy","description":"Specifies whether binary files that are copied during the build, such as in a Copy Bundle Resources or Copy Files build phase, should be stripped of debugging symbols. It does not cause the linked product of a target to be stripped—use [Strip Linked Product (STRIP\\_INSTALLED\\_PRODUCT)](itcaec37c2a6.html#dev5c0105d2a) for that.","type":"Boolean","default_value":"YES","category":"Deployment","values":null,"command_line_arguments":null},"PBXCP_STRIP_TOOL":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"PBXCP_STRIP_BITCODE":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"PBXCP_BITCODE_STRIP_MODE":{"name":null,"description":null,"type":"Enumeration","default_value":"","category":null,"values":["none","replace-with-marker","all"],"command_line_arguments":{"":[],"none":[],"\u003c\u003cotherwise\u003e\u003e":["-bitcode-strip","$(value)"]}},"PBXCP_BITCODE_STRIP_TOOL":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"COPYING_PRESERVES_HFS_DATA":{"name":"Preserve HFS Data","description":"Causes the copying of resources to preserve resource forks and Finder info.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"PBXCP_IGNORE_MISSING_INPUTS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-ignore-missing-inputs"],"NO":[]}},"LIBTOOL":{"name":null,"description":null,"type":"Path","default_value":"libtool","category":null,"values":null,"command_line_arguments":null},"LIBTOOL_DETERMINISTIC_MODE":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"ALL_OTHER_LIBTOOLFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"$(OTHER_LIBTOOLFLAGS) $(OTHER_LIBTOOLFLAGS_$(variant)) $(OTHER_LIBTOOLFLAGS_$(arch)) $(OTHER_LIBTOOLFLAGS_$(variant)_$(arch)) $(PRODUCT_SPECIFIC_LIBTOOLFLAGS)","category":null,"values":null,"command_line_arguments":null},"LIBTOOL_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":null},"LIBTOOL_DEPENDENCY_INFO_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_libtool_dependency_info.dat","category":null,"values":null,"command_line_arguments":null},"IIG_FRAMEWORK_NAME":{"name":null,"description":null,"type":"String","default_value":"$(PRODUCT_NAME)","category":null,"values":null,"command_line_arguments":null},"OTHER_IIG_FLAGS":{"name":"Other IIG Flags","description":"Space-separated list of additional flags to pass to the `iig` compiler. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular `iig` flag","type":"StringList","default_value":"","category":"Build Options","values":null,"command_line_arguments":null},"IIG_CXX_LANGUAGE_STANDARD":{"name":null,"description":null,"type":"String","default_value":"$(CLANG_CXX_LANGUAGE_STANDARD)","category":null,"values":null,"command_line_arguments":{"compiler-default":["-x","c++"],"\u003c\u003cotherwise\u003e\u003e":["-x","c++","-std=$(value)"]}},"IIG_PREPROCESSOR_DEFINITIONS":{"name":null,"description":null,"type":"StringList","default_value":"__IIG=1","category":null,"values":null,"command_line_arguments":["-D$(value)"]},"OTHER_IIG_CFLAGS":{"name":"Other IIG C Flags","description":"Space-separated list of additional flags to pass to the `iig` invocation of clang. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular `iig` flag","type":"StringList","default_value":"","category":"Build Options","values":null,"command_line_arguments":null},"SYSTEM_HEADER_SEARCH_PATHS":{"name":"System Header Search Paths","description":"This is a list of paths to folders to be searched by the compiler for included or imported system header files when compiling C, Objective-C, C++, or Objective-C++. The order is from highest to lowest precedence. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted. This setting is very similar to \"Header Search Paths\", except that headers are passed to the compiler in a way that suppresses most warnings for headers found in system search paths. If the compiler doesn't support the concept of system header search paths, then the search paths are appended to any existing header search paths defined in \"Header Search Paths\".","type":"PathList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"IIG_DERIVED_FILE_DIR":{"name":null,"description":null,"type":"String","default_value":"$(DERIVED_FILE_DIR)/$(IIG_FRAMEWORK_NAME)","category":null,"values":null,"command_line_arguments":null},"IIG_HEADERS_DIR":{"name":null,"description":null,"type":"String","default_value":"$(IIG_DERIVED_FILE_DIR)","category":null,"values":null,"command_line_arguments":null},"IIG_IMPLEMENTATION_DIR":{"name":null,"description":null,"type":"String","default_value":"$(IIG_DERIVED_FILE_DIR)","category":null,"values":null,"command_line_arguments":null},"VALIDATE_STRINGS_FILES_WHILE_COPYING":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"STRINGS_FILE_INPUT_ENCODING":{"name":null,"description":null,"type":"String","default_value":"$(InputFileTextEncoding)","category":null,"values":null,"command_line_arguments":null},"STRINGS_FILE_OUTPUT_ENCODING":{"name":"Strings File Output Encoding","description":"Specify the encoding to be used for Strings files (by default, the output encoding will be 16-bit Unicode). The value can be either an `NSStringEncoding`, such as one of the numeric values recognized by `NSString`, or it can be an IANA character set name as understood by `CFString`. The operation will fail if the file cannot be converted to the specified encoding.","type":"Enumeration","default_value":"UTF-16","category":"Packaging","values":["UTF-16","UTF-8","binary"],"command_line_arguments":null},"OPENCLC":{"name":null,"description":null,"type":"String","default_value":"/System/Library/Frameworks/OpenCL.framework/Libraries/openclc","category":null,"values":null,"command_line_arguments":null},"OPENCL_COMPILER_VERSION":{"name":"OpenCL Compiler Version","description":"The `OpenCL` C compiler version supported by the platform.","type":"Enumeration","default_value":"CL1.1","category":"BuildOptions","values":["CL1.2","CL1.1"],"command_line_arguments":null},"OPENCL_ARCHS":{"name":"OpenCL Architectures","description":"A list of the architectures for which the product will be built. This is usually set to a predefined build setting provided by the platform.","type":"OpenCLArchitectures","default_value":"i386 x86_64 gpu_32 gpu_64","category":"BuildOptions","values":null,"command_line_arguments":null},"OPENCL_OTHER_BC_FLAGS":{"name":"OpenCL Other Flags","description":"Space-separated list of additional flags to pass to the compiler. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular compiler flag.","type":"StringList","default_value":null,"category":"BuildOptions","values":null,"command_line_arguments":null},"OPENCL_PREPROCESSOR_DEFINITIONS":{"name":"OpenCL Preprocessor Macros","description":"Space-separated list of preprocessor macros of the form `foo` or `foo=bar`.","type":"StringList","default_value":null,"category":"Preprocessing","values":null,"command_line_arguments":null},"OPENCL_MAD_ENABLE":{"name":"Use MAD","description":"Allow `a * b + c` to be replaced by a `mad` instruction. The `mad` computes `a * b + c` with reduced accuracy. For example, some `OpenCL` devices implement `mad` as truncate the result of `a * b` before adding it to `c`.\n\nThis is intended to be a performance optimization.","type":"Boolean","default_value":"NO","category":"CodeGen","values":null,"command_line_arguments":null},"OPENCL_FAST_RELAXED_MATH":{"name":"Relax IEEE Compliance","description":"This allows optimizations for floating-point arithmetic that may violate the IEEE 754 standard and the `OpenCL` numerical compliance requirements defined in in section 7.4 for single-precision floating-point, section 9.3.9 for double-precision floating-point, and edge case behavior in section 7.5 of the `OpenCL` 1.1 specification.\n\nThis is intended to be a performance optimization.\n\nThis option causes the preprocessor macro ` __FAST_RELAXED_MATH__ ` to be defined in the `OpenCL` program.","type":"Boolean","default_value":"NO","category":"CodeGen","values":null,"command_line_arguments":null},"OPENCL_DENORMS_ARE_ZERO":{"name":"Flush denorms to zero","description":"This option controls how single precision and double precision denormalized numbers are handled. If specified as a build option, the single precision denormalized numbers may be flushed to zero; double precision denormalized numbers may also be flushed to zero if the optional extension for double precision is supported. This is intended to be a performance hint and the `OpenCL` compiler can choose not to flush denorms to zero if the device supports single precision (or double precision) denormalized numbers.\n\nThis option is ignored for single precision numbers if the device does not support single precision denormalized numbers, for example, `CL_FP_DENORM` bit is not set in `CL_DEVICE_SINGLE_FP_CONFIG`.\n\nThis option is ignored for double precision numbers if the device does not support double precision or if it does support double precision but not double precision denormalized numbers, for example, `CL_FP_DENORM` bit is not set in `CL_DEVICE_DOUBLE_FP_CONFIG`.\n\nThis flag only applies for scalar and vector single precision floating-point variables and computations on these floating-point variables inside a program. It does not apply to reading from or writing to image objects.","type":"Boolean","default_value":"NO","category":"CodeGen","values":null,"command_line_arguments":null},"OPENCL_AUTO_VECTORIZE_ENABLE":{"name":"Auto-vectorizer","description":"Auto-vectorizes the `OpenCL` kernels for the CPU. This setting takes effect only for the CPU. This makes it possible to write a single kernel that is portable and performant across CPUs and GPUs.","type":"Boolean","default_value":"YES","category":"CodeGen","values":null,"command_line_arguments":null},"OPENCL_DOUBLE_AS_SINGLE":{"name":"Double as single","description":"Treat double precision floating-point expression as a single precision floating-point expression. This option is available for GPUs only.","type":"Boolean","default_value":"NO","category":"CodeGen","values":null,"command_line_arguments":null},"OPENCL_OPTIMIZATION_LEVEL":{"name":"Optimization Level","description":"- _None:_ Do not optimize. `-O0` With this setting, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results. Statements are independent: if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you would expect from the source code.\n\n- _Fast:_ Optimizing compilation takes somewhat more time, and a lot more memory for a large function. `-O, -O1` With this setting, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time. In Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are disabled by default when optimizing.\n\n- _Faster:_ The compiler performs nearly all supported optimizations that do not involve a space-speed tradeoff. `-O2` With this setting, the compiler does not perform loop unrolling or function inlining, or register renaming. As compared to the `Fast` setting, this setting increases both compilation time and the performance of the generated code.\n\n- _Fastest:_ Turns on all optimizations specified by the `Faster` setting and also turns on function inlining and register renaming options. This setting may result in a larger binary. `-O3`\n\n- _Fastest, smallest:_ Optimize for size. This setting enables all `Faster` optimizations that do not typically increase code size. It also performs further optimizations designed to reduce code size. `-Os`","type":"Enumeration","default_value":"s","category":"CodeGen","values":["0","1","2","3","s"],"command_line_arguments":null},"NASM_OUTPUT_FILE_FORMAT":{"name":null,"description":null,"type":"String","default_value":"macho","category":null,"values":null,"command_line_arguments":null},"NASM_PREINCLUDE_FILE":{"name":"Nasm Preinclude File","description":"Specifies a file to be preincluded, before the main source file starts to be processed.","type":"String","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"HEADER_SEARCH_PATHS":{"name":"Header Search Paths","description":"This is a list of paths to folders to be searched by the compiler for included or imported header files when compiling C, Objective-C, C++, or Objective-C++. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted.","type":"PathList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"NASM_OTHER_FLAGS":{"name":"Other Nasm Flags","description":"Space-separated list of additional flags to pass to the `nasm` assembler. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular `nasm` flag.","type":"StringList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"DTRACE_OUTPUT_FILE_TYPE":{"name":null,"description":null,"type":"Enumeration","default_value":"Header","category":null,"values":[{"Value":"Header","CommandLineFlag":"-h"}],"command_line_arguments":null},"DTRACE_OTHER_FLAGS":{"name":"Other DTrace Flags","description":"Space-separated list of additional flags to pass to the `dtrace` compiler. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular `dtrace` flag.","type":"StringList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"OTHER_MIGFLAGS":{"name":"Other MiG Flags","description":"Space-separated list of additional flags to pass to `mig`. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a `mig` flag.","type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"MIG_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":null},"COMPRESS_TIFF_FILES_WHILE_COPYING":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"NO":[],"YES":["--compression","lzw"]}},"INSTRUMENTS_PACKAGE_BUILDER":{"name":null,"description":null,"type":"Path","default_value":"instrumentbuilder","category":null,"values":null,"command_line_arguments":null},"INSTRUMENTS_PACKAGE_BUILDER_SEARCH_PATHS":{"name":"Instruments Package Builder Search Paths","description":null,"type":"StringList","default_value":"$(BUILT_PRODUCTS_DIR)","category":"Search Paths","values":null,"command_line_arguments":null},"INSTRUMENTS_PACKAGE_BUILDER_LINKED_PACKAGES":{"name":"Linked Instruments Packages","description":null,"type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"INSTRUMENTS_PACKAGE_BUILDER_DEPENDENCY_INFO_FILE":{"name":null,"description":null,"type":"String","default_value":"$(TARGET_TEMP_DIR)/instruments-package-builder.dependencies","category":null,"values":null,"command_line_arguments":["--emit-dependency-info","$(value)"]},"INSTRUMENTS_PACKAGE_BUILDER_NO_SYSTEM_SEARCH":{"name":"Disable Standard Instruments Package Search Path","description":null,"type":"Boolean","default_value":"NO","category":"Search Paths","values":null,"command_line_arguments":null},"INSTRUMENTS_PACKAGE_BUILDER_VERSION_OVERRIDE":{"name":"Instruments Package Version","description":null,"type":"String","default_value":"","category":"Versioning","values":null,"command_line_arguments":null},"REZ_SCRIPT_TYPE":{"name":"Rez Script Type","description":"Enables the recognition of a specific 2-byte character script identifier to use when compiling resource manager resources. This allows for 2-byte characters in strings to be handled as indivisible entities. The default language is Roman, which specifies 1-byte character sets.","type":"Enumeration","default_value":"Roman","category":"Language","values":["Roman","Japanese","Korean","SimpChinese","TradChinese"],"command_line_arguments":["-script","$(value)"]},"REZ_PREFIX_FILE":{"name":"Rez Prefix File","description":"Implicitly include the named file on the command line for each `Rez` file compiled. The path given should either be a project relative path or an absolute path.","type":"String","default_value":"","category":"Language","values":null,"command_line_arguments":null},"OTHER_REZFLAGS":{"name":"Other Rez Flags","description":"Space-separated list of additional flags to pass to the `Rez` compiler. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a particular `Rez` flag.","type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"REZ_RESOLVE_ALIASES":{"name":"Resolve Aliases","description":"Enables aliases to be unresolved or conditionally resolved. The default is to resolve aliases always.","type":"Enumeration","default_value":"Always","category":"ResourceGeneration","values":["Always","Never","Includes","Outputs"],"command_line_arguments":{"Never":["-noResolve"],"Outputs":["-noResolve","include"],"Always":[],"Includes":["-noResolve","output"]}},"REZ_RESOURCE_MAP_READ_ONLY":{"name":"Read-only Resource Map","description":"Enabling this option causes the resource map output to be read-only.","type":"Boolean","default_value":"NO","category":"ResourceGeneration","values":null,"command_line_arguments":null},"REZ_PREPROCESSOR_DEFINITIONS":{"name":"Preprocessor Defines","description":"These strings will be defined when compiling resource manager resources.","type":"StringList","default_value":"","category":"Preprocessing","values":null,"command_line_arguments":null},"REZ_PREPROCESSOR_UNDEFINITIONS":{"name":"Preprocessor Undefines","description":"These strings will be undefined when compiling resource manager resources.","type":"StringList","default_value":"","category":"Preprocessing","values":null,"command_line_arguments":null},"REZ_SHOW_DEBUG_OUTPUT":{"name":"Show Diagnostic Output","description":"Enabling this option causes version and progress information to be written when compiling resource manager resources.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"REZ_SUPPRESS_REDECLARED_RESOURCE_TYPE_WARNINGS":{"name":"Suppress Type Redeclaration Warnings","description":"Enabling this option causes warnings about redeclared resource types to be suppressed.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"RESMERGER_SOURCES_FORK":{"name":"File Fork of Binary Sources","description":"Determines whether `ResMerger` treats binary input files as data-fork hosted or resource-fork hosted, or whether it automatically examines each input file.","type":"Enumeration","default_value":"auto","category":"BinarySources","values":["data","resource","auto"],"command_line_arguments":null},"LEX_CASE_INSENSITIVE_SCANNER":{"name":"Generate Case-Insensitive Scanner","description":"Enabling this option causes `lex` to generate a case-insensitive scanner. The case of letters given in the `lex` input patterns will be ignored, and tokens in the input will be matched regardless of case. The matched text given in `yytext` will have the preserved case (for example, it will not be folded).","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"LEX_SUPPRESS_DEFAULT_RULE":{"name":"Suppress Default Rule","description":"Enabling this option causes the default rule (that unmatched scanner input is echoed to `stdout`) to be suppressed. If the scanner encounters input that does not match any of its rules, it aborts with an error. This option is useful for finding holes in a scanner's rule set.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"LEX_INSERT_LINE_DIRECTIVES":{"name":"Insert #line Directives","description":"Enabling this option instructs `lex` to insert `#line` directives so error messages in the actions will be correctly located with respect to either the original `lex` input file (if the errors are due to code in the input file), or `lex.yy.c` (if the errors are `lex`'s fault). This option is enabled by default; disabling it passes a flag to `lex` to not insert `#line` directives.","type":"Boolean","default_value":"YES","category":"BuildOptions","values":null,"command_line_arguments":{"NO":["-L"]}},"LEXFLAGS":{"name":"Other Lex Flags","description":"Space-separated list of additional flags to pass to `lex`. Be sure to backslash-escape any arguments that contain spaces or special characters, such as path names that may contain spaces. Use this setting if Xcode does not already provide UI for a `lex` flag.","type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"LEX_SUPPRESS_WARNINGS":{"name":"Suppress Warning Messages","description":"Enabling this option causes `lex` to suppress its warning messages.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"STRIP_STYLE":{"name":"Strip Style","description":"The level of symbol stripping to be performed on the linked product of the build. The default value is defined by the target's product type.\n\n- _All Symbols:_ Completely strips the binary, removing the symbol table and relocation information. `all, -s`\n\n- _Non-Global Symbols:_ Strips non-global symbols, but saves external symbols. `non-global, -x`\n\n- _Debugging Symbols:_ Strips debugging symbols, but saves local and global symbols. `debugging, -S`","type":"Enumeration","default_value":"all","category":"Deployment","values":[{"Value":"all"},{"Value":"non-global"},{"Value":"debugging"}],"command_line_arguments":null},"STRIPFLAGS":{"name":"Additional Strip Flags","description":"Additional flags to be passed when stripping the linked product of the build.","type":"StringList","default_value":"","category":"Deployment","values":null,"command_line_arguments":null},"STRIP_SWIFT_SYMBOLS":{"name":"Strip Swift Symbols","description":"Adjust the level of symbol stripping specified by the STRIP\\_STYLE setting so that when the linked product of the build is stripped, all Swift symbols will be removed.","type":"Boolean","default_value":"YES","category":"Deployment","values":null,"command_line_arguments":null},"TAPI_ENABLE_VERIFICATION_MODE":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"TAPI_VERIFY_AGAINST":{"name":null,"description":null,"type":"String","default_value":"$(BuiltBinaryPath)","category":null,"values":null,"command_line_arguments":null},"TAPI_VERIFY_MODE":{"name":"Text-Based InstallAPI Verification Mode","description":"Selects the level of warnings and errors to report when building `Text-Based InstallAPI`.","type":"Enumeration","default_value":"ErrorsOnly","category":"Text-Based API","values":[{"Value":"ErrorsOnly","DisplayName":"Errors Only"},{"Value":"ErrorsAndWarnings","DisplayName":"Errors and Warnings"},{"Value":"Pedantic","DisplayName":"Pedantic"}],"command_line_arguments":null},"TAPI_TARGET_TRIPLE_ARCHS":{"name":null,"description":null,"type":"StringList","default_value":"$(ARCHS)","category":null,"values":null,"command_line_arguments":["-target","$(value)-$(LLVM_TARGET_TRIPLE_VENDOR)-$(LLVM_TARGET_TRIPLE_OS_VERSION)$(LLVM_TARGET_TRIPLE_SUFFIX)"]},"TAPI_TARGET_TRIPLE_VARIANTS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"TAPI_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-$(DEPLOYMENT_TARGET_CLANG_FLAG_NAME)=$(value)"]}},"TAPI_ARCHS":{"name":null,"description":null,"type":"StringList","default_value":"$(ARCHS)","category":null,"values":null,"command_line_arguments":["-arch","$(value)"]},"TAPI_PRODUCT_TYPE":{"name":null,"description":null,"type":"String","default_value":"$(PRODUCT_TYPE)","category":null,"values":null,"command_line_arguments":{"com.apple.product-type.library.dynamic":["-dynamiclib"],"\u003c\u003cotherwise\u003e\u003e":[]}},"TAPI_DYLIB_INSTALL_NAME":{"name":null,"description":null,"type":"Path","default_value":"$(LD_DYLIB_INSTALL_NAME)","category":null,"values":null,"command_line_arguments":null},"TAPI_DYLIB_COMPATIBILITY_VERSION":{"name":null,"description":null,"type":"Path","default_value":"$(DYLIB_COMPATIBILITY_VERSION)","category":null,"values":null,"command_line_arguments":null},"TAPI_DYLIB_CURRENT_VERSION":{"name":null,"description":null,"type":"Path","default_value":"$(DYLIB_CURRENT_VERSION)","category":null,"values":null,"command_line_arguments":null},"TAPI_APPLICATION_EXTENSION_API_ONLY":{"name":null,"description":null,"type":"bool","default_value":"$(APPLICATION_EXTENSION_API_ONLY)","category":null,"values":null,"command_line_arguments":{"YES":["-fapplication-extension"],"NO":[]}},"TAPI_REEXPORTED_FRAMEWORK_INSTALL_NAMES":{"name":null,"description":null,"type":"StringList","default_value":"$(REEXPORTED_FRAMEWORK_INSTALL_NAMES)","category":null,"values":null,"command_line_arguments":["-reexport_install_name","$(value)"]},"TAPI_REEXPORTED_LIBRARY_INSTALL_NAMES":{"name":null,"description":null,"type":"StringList","default_value":"$(REEXPORTED_LIBRARY_INSTALL_NAMES)","category":null,"values":null,"command_line_arguments":["-reexport_install_name","$(value)"]},"TAPI_DYLIB_ALLOWABLE_CLIENTS":{"name":null,"description":null,"type":"StringList","default_value":"$(LD_DYLIB_ALLOWABLE_CLIENTS)","category":null,"values":null,"command_line_arguments":["-allowable_client","$(value)"]},"TAPI_FRAMEWORK_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":"$(FRAMEWORK_SEARCH_PATHS)","category":null,"values":null,"command_line_arguments":null},"TAPI_SYSTEM_FRAMEWORK_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":"$(SYSTEM_FRAMEWORK_SEARCH_PATHS)","category":null,"values":null,"command_line_arguments":null},"TAPI_LIBRARY_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":"$(LIBRARY_SEARCH_PATHS)","category":null,"values":null,"command_line_arguments":null},"TAPI_HEADER_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":"$(HEADER_SEARCH_PATHS)","category":null,"values":null,"command_line_arguments":null},"TAPI_SYSTEM_HEADER_SEARCH_PATHS":{"name":null,"description":null,"type":"PathList","default_value":"$(SYSTEM_HEADER_SEARCH_PATHS)","category":null,"values":null,"command_line_arguments":null},"INLINE_PRIVATE_FRAMEWORKS":{"name":"Enable Text-Based Stubs Inlining","description":"Enables private framework inlining for Text-Based Stubs.","type":"bool","default_value":"NO","category":"Text-Based API","values":null,"command_line_arguments":null},"TAPI_PREPROCESSOR_DEFINITIONS":{"name":null,"description":null,"type":"StringList","default_value":"$(GCC_PREPROCESSOR_DEFINITIONS) $(GCC_PREPROCESSOR_DEFINITIONS_NOT_USED_IN_PRECOMPS)","category":null,"values":null,"command_line_arguments":["-D$(value)"]},"TAPI_EMIT_PROFILING_SYMBOLS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":["-fprofile-instr-generate"],"NO":[]}},"OTHER_TAPI_FLAGS":{"name":"Other Text-Based InstallAPI Flags","description":"Options defined in this setting are passed to invocations of the `Text-Based InstallAPI` tool.","type":"StringList","default_value":"","category":"Text-Based API","values":null,"command_line_arguments":null},"TAPI_INPUTS":{"name":null,"description":null,"type":"PathList","default_value":null,"category":null,"values":null,"command_line_arguments":["$(value)"]},"ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES":{"name":"Always Embed Swift Standard Libraries","description":"Always embed the Swift standard libraries in the target's products, even if the target does not contain any Swift code. For example, this should be enabled if the target is embedding other products which contain Swift, or if it is a test target which does not contain Swift but which is testing a product which does. This setting only applies to wrapped products, not to standalone binary products.","type":"Boolean","default_value":"$(EMBEDDED_CONTENT_CONTAINS_SWIFT)","category":"Build Options","values":null,"command_line_arguments":null},"EMBEDDED_CONTENT_CONTAINS_SWIFT":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_ACTION":{"name":null,"description":null,"type":null,"default_value":null,"category":null,"values":null,"command_line_arguments":["--copy"]},"SWIFT_STDLIB_TOOL_VERBOSITY":{"name":null,"description":null,"type":"Enumeration","default_value":"verbose","category":null,"values":["none","verbose","extra-verbose"],"command_line_arguments":{"verbose":["--verbose"],"extra-verbose":["--verbose","--verbose"],"none":[]}},"SWIFT_STDLIB_TOOL_CODE_SIGN_IDENTITY":{"name":null,"description":null,"type":"String","default_value":"$(EXPANDED_CODE_SIGN_IDENTITY)","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_KEYCHAIN":{"name":null,"description":null,"type":"String","default_value":"$(CODE_SIGN_KEYCHAIN)","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_OTHER_CODE_SIGN_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"$(OTHER_CODE_SIGN_FLAGS)","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_EXECUTABLE_TO_SCAN":{"name":null,"description":null,"type":"Path","default_value":"$(InputPath)","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_FOLDERS_TO_SCAN":{"name":null,"description":null,"type":"PathList","default_value":"","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_SOURCE_LIBRARIES":{"name":null,"description":null,"type":"Path","default_value":"$(SWIFT_LIBRARY_PATH)","category":null,"values":null,"command_line_arguments":{"":["--platform","$(PLATFORM_NAME)"],"\u003c\u003cotherwise\u003e\u003e":["--source-libraries","$(value)"]}},"SWIFT_STDLIB_TOOL_TOOLCHAINS":{"name":null,"description":null,"type":"PathList","default_value":"$(EFFECTIVE_TOOLCHAINS_DIRS)","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_DESTINATION_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_BUILD_DIR)/$(FRAMEWORKS_FOLDER_PATH)","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_UNSIGNED_DESTINATION_DIR":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"SWIFT_STDLIB_TOOL_STRIP_BITCODE":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"OTHER_SWIFT_STDLIB_TOOL_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"PRODUCT_TYPE_SWIFT_STDLIB_TOOL_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"TOOLCHAINS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"DEVELOPER_DIR":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SWIFT_EXEC":{"name":null,"description":null,"type":"Path","default_value":"swiftc","category":null,"values":null,"command_line_arguments":null},"SWIFT_LIBRARIES_ONLY":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-parse-as-library"],"NO":[]}},"SWIFT_ENABLE_INCREMENTAL_COMPILATION":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":["-incremental"],"NO":[]}},"SWIFT_CROSS_MODULE_OPTIMIZATION":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":["-cross-module-optimization"],"NO":[]}},"SWIFT_PRECOMPILE_BRIDGING_HEADER":{"name":"Precompile Bridging Header","description":"Generate a precompiled header for the Objective-C bridging header, if used, in order to reduce overall build times.","type":"Boolean","default_value":"YES","category":"General","values":null,"command_line_arguments":{"YES":[],"NO":["-disable-bridging-pch"]}},"SWIFT_USE_PARALLEL_WHOLE_MODULE_OPTIMIZATION":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"SWIFT_USE_PARALLEL_WMO_TARGETS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"SWIFT_WHOLE_MODULE_OPTIMIZATION":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":{"YES":"-whole-module-optimization","NO":[]}},"SWIFT_LIBRARY_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"SWIFT_RESOURCE_DIR":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SWIFT_MODULE_NAME":{"name":null,"description":null,"type":"String","default_value":"$(PRODUCT_MODULE_NAME)","category":null,"values":null,"command_line_arguments":["-module-name","$(value)"]},"SWIFT_OBJC_BRIDGING_HEADER":{"name":"Objective-C Bridging Header","description":"Path to the header defining the Objective-C interfaces to be exposed in Swift.","type":"String","default_value":"","category":"General","values":null,"command_line_arguments":null},"SWIFT_OBJC_INTERFACE_HEADER_NAME":{"name":"Objective-C Generated Interface Header Name","description":"Name to use for the header that is generated by the Swift compiler for use in `#import` statements in Objective-C.","type":"String","default_value":"$(SWIFT_MODULE_NAME)-Swift.h","category":"General","values":null,"command_line_arguments":null},"SWIFT_INSTALL_OBJC_HEADER":{"name":"Install Objective-C Compatibility Header","description":"For frameworks, install the Objective-C compatibility header describing bridged Swift classes into the [Public Headers Folder Path (PUBLIC\\_HEADERS\\_FOLDER\\_PATH)](itcaec37c2a6.html#devdbb795497) so they may be accessed from Objective-C code using the framework. Defaults to `YES`.","type":"Boolean","default_value":"YES","category":"General","values":null,"command_line_arguments":null},"SWIFT_OPTIMIZATION_LEVEL":{"name":"Optimization Level","description":"- _None:_ Compile without any optimization. `-Onone`\n\n- _Optimize for Speed:_\u0026nbsp;`-O`\n\n- _Optimize for Size:_\u0026nbsp;`-Osize`\n\n- _Whole Module Optimization:_\u0026nbsp;`-O -whole-module-optimization`","type":"Enumeration","default_value":"-O","category":"Code Generation","values":["-Onone","-O","-Osize"],"command_line_arguments":{"-Owholemodule":["-O","-whole-module-optimization"],"\u003c\u003cotherwise\u003e\u003e":"$(value)"}},"SWIFT_COMPILATION_MODE":{"name":"Compilation Mode","description":"This setting controls the way the Swift files in a module are rebuilt.\n\n- _Incremental_: Only rebuild the Swift source files in the module that are out of date, running multiple compiler processes as needed.\n\n- _Whole Module_: Always rebuild all Swift source files in the module, in a single compiler process.","type":"Enumeration","default_value":"singlefile","category":"Code Generation","values":["singlefile","wholemodule"],"command_line_arguments":{"wholemodule":"-whole-module-optimization","\u003c\u003cotherwise\u003e\u003e":[]}},"SWIFT_ENABLE_BATCH_MODE":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":"-enable-batch-mode","NO":"-disable-batch-mode"}},"SWIFT_DISABLE_SAFETY_CHECKS":{"name":"Disable Safety Checks","description":"Disable runtime safety checks when optimizing.","type":"Boolean","default_value":"NO","category":"Code Generation","values":null,"command_line_arguments":null},"SWIFT_ENFORCE_EXCLUSIVE_ACCESS":{"name":"Exclusive Access to Memory","description":"Enforce exclusive access at run-time.","type":"Enumeration","default_value":"on","category":"Code Generation","values":["on","debug-only","off"],"command_line_arguments":{"\u003c\u003cotherwise\u003e\u003e":"-enforce-exclusivity=$(value)","on":"-enforce-exclusivity=checked","off":"-enforce-exclusivity=unchecked","compile-time":"-enforce-exclusivity=unchecked","none":"-enforce-exclusivity=none","full":[],"debug-only":[]}},"SWIFT_SWIFT3_OBJC_INFERENCE":{"name":"Swift 3 @objc Inference","description":"Control how the Swift compiler infers @objc for declarations.","type":"Enumeration","default_value":"Default","category":"Code Generation","values":["Default","On","Off"],"command_line_arguments":{"Off":["-Xfrontend","-disable-swift3-objc-inference"],"On":["-Xfrontend","-enable-swift3-objc-inference","-Xfrontend","-warn-swift3-objc-inference-minimal"]}},"SWIFT_STDLIB":{"name":null,"description":null,"type":"String","default_value":"swiftCore","category":null,"values":null,"command_line_arguments":null},"SWIFT_INCLUDE_PATHS":{"name":"Import Paths","description":"A list of paths to be searched by the Swift compiler for additional Swift modules.","type":"PathList","default_value":null,"category":"Search Paths","values":null,"command_line_arguments":null},"SWIFT_RESPONSE_FILE_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(SWIFT_RESPONSE_FILE_PATH_$(variant)_$(arch))","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":"@$(value)"}},"SWIFT_ACTIVE_COMPILATION_CONDITIONS":{"name":"Active Compilation Conditions","description":"A list of compilation conditions to enable for conditional compilation expressions.","type":"StringList","default_value":null,"category":"Custom Flags","values":null,"command_line_arguments":["-D$(value)"]},"SWIFT_TOOLCHAIN_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":["$(value)"]},"OTHER_SWIFT_FLAGS":{"name":"Other Swift Flags","description":"A list of additional flags to pass to the Swift compiler.","type":"StringList","default_value":null,"category":"Custom Flags","values":null,"command_line_arguments":["$(value)"]},"SWIFT_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":null},"SWIFT_TARGET_TRIPLE":{"name":null,"description":null,"type":"String","default_value":"$(CURRENT_ARCH)-apple-$(SWIFT_PLATFORM_TARGET_PREFIX)$(SWIFT_DEPLOYMENT_TARGET)$(LLVM_TARGET_TRIPLE_SUFFIX)","category":null,"values":null,"command_line_arguments":null},"SWIFT_TARGET_TRIPLE_VARIANTS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SWIFT_VERSION":{"name":"Swift Language Version","description":"","type":"String","default_value":"","category":"Language","values":null,"command_line_arguments":null},"SWIFT_SERIALIZE_DEBUGGING_OPTIONS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":["-Xfrontend","-serialize-debugging-options"],"NO":[]}},"SWIFT_ENABLE_APP_EXTENSION":{"name":null,"description":null,"type":"Boolean","default_value":"$(APPLICATION_EXTENSION_API_ONLY)","category":null,"values":null,"command_line_arguments":{"YES":["-application-extension"],"NO":[]}},"SWIFT_LINK_OBJC_RUNTIME":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":{"YES":[],"NO":[]}},"SWIFT_MIGRATE_CODE":{"name":null,"description":null,"type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":{"YES":["-update-code"],"NO":[]}},"SWIFT_REFLECTION_METADATA_LEVEL":{"name":"Reflection Metadata Level","description":"This setting controls the level of reflection metadata the Swift compiler emits.\n\n- _All:_ Type information about stored properties of Swift structs and classes, Swift enum cases, and their names, are emitted into the binary for reflection and analysis in the Memory Graph Debugger.\n\n- _Without Names:_ Only type information about stored properties and cases are emitted into the binary, with their names omitted. `-disable-reflection-names`\n\n- _None:_ No reflection metadata is emitted into the binary. Accuracy of detecting memory issues involving Swift types in the Memory Graph Debugger will be degraded and reflection in Swift code may not be able to discover children of types, such as properties and enum cases. `-disable-reflection-metadata`","type":"Enumeration","default_value":"all","category":"General","values":["all","without-names","none"],"command_line_arguments":{"all":[],"without-names":["-Xfrontend","-disable-reflection-names"],"none":["-Xfrontend","-disable-reflection-metadata"]}},"SWIFT_BITCODE_GENERATION_MODE":{"name":null,"description":null,"type":"Enumeration","default_value":"$(BITCODE_GENERATION_MODE)","category":null,"values":["marker","bitcode"],"command_line_arguments":{"marker":["-embed-bitcode-marker"],"bitcode":["-embed-bitcode"]}},"SWIFT_ADDRESS_SANITIZER":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_ADDRESS_SANITIZER)","category":null,"values":null,"command_line_arguments":{"YES":["-sanitize=address"],"NO":[]}},"SWIFT_ADDRESS_SANITIZER_ALLOW_ERROR_RECOVERY":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_ADDRESS_SANITIZER_ALLOW_ERROR_RECOVERY)","category":null,"values":null,"command_line_arguments":{"YES":["-sanitize-recover=address"],"NO":[]}},"SWIFT_THREAD_SANITIZER":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_THREAD_SANITIZER)","category":null,"values":null,"command_line_arguments":{"YES":["-sanitize=thread"],"NO":[]}},"SWIFT_ENABLE_TESTABILITY":{"name":null,"description":null,"type":"Boolean","default_value":"$(ENABLE_TESTABILITY)","category":null,"values":null,"command_line_arguments":{"YES":["-enable-testing"],"NO":[]}},"SWIFT_SUPPRESS_WARNINGS":{"name":"Suppress Warnings","description":"Don't emit any warnings.","type":"Boolean","default_value":"NO","category":"Warnings Policies","values":null,"command_line_arguments":{"YES":["-suppress-warnings"],"NO":[]}},"SWIFT_TREAT_WARNINGS_AS_ERRORS":{"name":"Treat Warnings as Errors","description":"Treat all warnings as errors.","type":"Boolean","default_value":"NO","category":"Warnings Policies","values":null,"command_line_arguments":{"YES":["-warnings-as-errors"],"NO":[]}},"SWIFT_INDEX_STORE_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(INDEX_DATA_STORE_DIR)","category":null,"values":null,"command_line_arguments":null},"SWIFT_INDEX_STORE_ENABLE":{"name":null,"description":null,"type":"Boolean","default_value":"$(INDEX_ENABLE_DATA_STORE)","category":null,"values":null,"command_line_arguments":{"YES":["-index-store-path","$(SWIFT_INDEX_STORE_PATH)"],"NO":[]}},"SWIFT_EMIT_MODULE_INTERFACE":{"name":null,"description":null,"type":"Boolean","default_value":"$(BUILD_LIBRARY_FOR_DISTRIBUTION)","category":null,"values":null,"command_line_arguments":null},"SWIFT_ENABLE_LIBRARY_EVOLUTION":{"name":null,"description":null,"type":"Boolean","default_value":"$(BUILD_LIBRARY_FOR_DISTRIBUTION)","category":null,"values":null,"command_line_arguments":{"YES":["-enable-library-evolution"],"NO":[]}},"MTL_TARGET_TRIPLE":{"name":null,"description":null,"type":"String","default_value":"air64-$(LLVM_TARGET_TRIPLE_VENDOR)-macos$(MACOSX_DEPLOYMENT_TARGET)","category":null,"values":null,"command_line_arguments":["-target","$(value)"]},"MTL_ENABLE_DEBUG_INFO":{"name":"Produce Debugging Information","description":"Debugging information is required for shader debugging and profiling.","type":"Enumeration","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-gline-tables-only"],"INCLUDE_SOURCE":["-gline-tables-only","-MO"],"NO":[]}},"MTL_HEADER_SEARCH_PATH_BUILT_PRODUCTS_DIR":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":"-I$(BUILT_PRODUCTS_DIR)/include"},"MTL_FRAMEWORK_SEARCH_PATH_BUILT_PRODUCTS_DIR":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":"-F$(BUILT_PRODUCTS_DIR)"},"MTL_HEADER_SEARCH_PATHS":{"name":"Header Search Paths","description":"This is a list of paths to folders to be searched by the compiler for included or imported header files when compiling Metal. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted. `MTL_HEADER_SEARCH_PATHS, -I`","type":"PathList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"MTL_PREPROCESSOR_DEFINITIONS":{"name":"Preprocessor Definitions","description":"Space-separated list of preprocessor macros of the form \"foo\" or \"foo=bar\".","type":"stringlist","default_value":null,"category":"BuildOptions","values":null,"command_line_arguments":null},"MTL_TREAT_WARNINGS_AS_ERRORS":{"name":"Treat Warnings as Errors","description":"Enabling this option causes all warnings to be treated as errors. `MTL_TREAT_WARNINGS_AS_ERRORS, -Werror`","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-Werror"],"NO":[]}},"MTL_IGNORE_WARNINGS":{"name":"Ignore Warnings","description":"Enabling this option causes all warnings to be ignored. `MTL_IGNORE_WARNINGS, -W`","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-W"],"NO":[]}},"MTL_FAST_MATH":{"name":"Enable Fast Math","description":"Enable optimizations for floating-point arithmetic that may violate the IEEE 754 standard and disable the high precision variant of math functions for single and half precision floating-point.","type":"Bool","default_value":"YES","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-ffast-math"],"NO":["-fno-fast-math"]}},"MTL_ENABLE_MODULES":{"name":"Enable Modules (Metal)","description":"Enables the use of modules. System headers are imported as semantic modules instead of raw headers. This can result in faster builds and project indexing.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-fmodules"],"NO":[]}},"CLANG_DIAGNOSTICS_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(MTLCOMPILER_OUTPUT_FILE:dir)$(InputFileBase)$(InputFileBaseUniquefier).dia","category":null,"values":null,"command_line_arguments":null},"MTLCOMPILER_OUTPUT_FILE":{"name":null,"description":null,"type":"String","default_value":"$(TARGET_TEMP_DIR)/Metal/$(InputFileBase)$(InputFileBaseUniquefier).air","category":null,"values":null,"command_line_arguments":["-o","$(value)"]},"MTLCOMPILER_DEPENDENCY_INFO_FILE":{"name":null,"description":null,"type":"String","default_value":"$(TARGET_TEMP_DIR)/Metal/$(InputFileBase)$(InputFileBaseUniquefier).dat","category":null,"values":null,"command_line_arguments":null},"MTL_INDEX_STORE_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(INDEX_DATA_STORE_DIR)","category":null,"values":null,"command_line_arguments":null},"MTL_ENABLE_INDEX_STORE":{"name":"Enable Index-While-Building Functionality (Metal)","description":"Control whether the compiler should emit index data while building.","type":"Boolean","default_value":"$(INDEX_ENABLE_DATA_STORE)","category":"BuildOptions","values":null,"command_line_arguments":{"YES":["-index-store-path","$(MTL_INDEX_STORE_PATH)"],"NO":[]}},"MTL_DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":"-mtvos-simulator-version-min=$(TVOS_DEPLOYMENT_TARGET)"},"MTL_LANGUAGE_REVISION":{"name":"Metal Language Revision","description":"Determine the language revision to use. A value for this option must be provided.","type":"Enumeration","default_value":"UseDeploymentTarget","category":"BuildOptions","values":null,"command_line_arguments":{"UseDeploymentTarget":[""],"Metal21":["-std=ios-metal2.1"],"Metal12":["-std=ios-metal1.2"],"Metal22":["-std=ios-metal2.2"],"Metal20":["-std=ios-metal2.0"],"Metal11":["-std=ios-metal1.1"]}},"MTL_COMPILER_FLAGS":{"name":"Other Metal Compiler Flags","description":"Space-separated list of compiler flags","type":"stringlist","default_value":null,"category":"BuildOptions","values":null,"command_line_arguments":null},"MTLLINKER_FLAGS":{"name":"Other Metal Linker Flags","description":"Space-separated list of metal linker flags","type":"stringlist","default_value":null,"category":"BuildOptions","values":null,"command_line_arguments":null},"MTLLINKER_OUTPUT_FILE":{"name":null,"description":null,"type":"String","default_value":"$(METAL_LIBRARY_OUTPUT_DIR)/$(METAL_LIBRARY_FILE_BASE).metallib","category":null,"values":null,"command_line_arguments":["-o","$(value)"]},"INTENTS_CODEGEN_LANGUAGE":{"name":"Intent Class Generation Language","description":"The Source-code language to use for generated Intent class. By default \"Automatic\" will analyze your project to determine the correct language. Adjust this setting to explicitly select \"Swift\" or \"Objective-C\".","type":"enum","default_value":"Automatic","category":"Code Generation","values":["Swift","Objective-C","Automatic"],"command_line_arguments":null},"COREML_CODEGEN_SWIFT_GLOBAL_MODULE":{"name":"CoreML Generated Model Inherits NSObject","description":"Generate Swift model classes that are marked with @objc and are descendants of NSObject, in order to be accessible and usable in Objective-C. This setting has no effect if \"CoreML Model Class Generation Language\" is set to \"Objective-C\".","type":"Boolean","default_value":"NO","category":"Code Generation","values":null,"command_line_arguments":null},"COREML_CODEGEN_LANGUAGE":{"name":"CoreML Model Class Generation Language","description":"The Source-code language to use for generated CoreML model class. By default \"Automatic\" will analyze your project to determine the correct language. Adjust this setting to explicitly select \"Swift\" or \"Objective-C\", or select \"None\" to disable model class generation.","type":"enum","default_value":"Automatic","category":"Code Generation","values":["Swift","Objective-C","Automatic","None"],"command_line_arguments":null},"COREML_CODEGEN_SWIFT_VERSION":{"name":null,"description":null,"type":"String","default_value":"$(SWIFT_VERSION)","category":null,"values":null,"command_line_arguments":null},"COREML_COMPILER_INFOPLIST_CONTENT_FILE":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/$(InputFileBase)-CoreMLPartialInfo.plist","category":null,"values":null,"command_line_arguments":null},"MOMC_OUTPUT_SUFFIX":{"name":null,"description":null,"type":"String","default_value":"$(MOMC_OUTPUT_SUFFIX_$(InputFileSuffix))","category":null,"values":null,"command_line_arguments":null},"MOMC_OUTPUT_SUFFIX_.xcdatamodeld":{"name":null,"description":null,"type":"String","default_value":".momd","category":null,"values":null,"command_line_arguments":null},"MOMC_OUTPUT_SUFFIX_.xcdatamodel":{"name":null,"description":null,"type":"String","default_value":".mom","category":null,"values":null,"command_line_arguments":null},"DEPLOYMENT_TARGET":{"name":null,"description":null,"type":"String","default_value":"$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":null},"MOMC_NO_WARNINGS":{"name":"Suppress all momc warnings","description":"Suppress managed object model compiler (`momc`) warnings from output during the compilation of `.xcdatamodel(d)` files","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"MOMC_NO_INVERSE_RELATIONSHIP_WARNINGS":{"name":"Suppress momc warnings on missing inverse relationships","description":"Suppress managed object model compiler (`momc`) warnings from output on missing inverse relationships during the compilation of `.xcdatamodel(d)` files","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"MOMC_NO_MAX_PROPERTY_COUNT_WARNINGS":{"name":"Suppress momc warnings for entities with more than 100 properties","description":"Suppress managed object model compiler (`momc`) warnings from output on entities with more than 100 properties during the compilation of `.xcdatamodel(d)` files.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"MOMC_NO_DELETE_RULE_WARNINGS":{"name":"Suppress momc warnings for delete rules","description":"Suppress managed object model compiler (`momc`) warnings for delete rules during the compilation of `.xcdatamodel(d)` files.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"MOMC_SUPPRESS_INVERSE_TRANSIENT_ERROR":{"name":"Suppress momc error on transient inverse relationships","description":"Suppress managed object model compiler (`momc`) warnings from output on transient inverse relationships during the compilation of `.xcdatamodel(d)` files. This is only intended to be used on 10.4.x created models that compiled properly in 10.4.x before the error was introduced in 10.5","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"MOMC_MODULE":{"name":null,"description":null,"type":"String","default_value":"$(PRODUCT_MODULE_NAME)","category":null,"values":null,"command_line_arguments":null},"MAPC_NO_WARNINGS":{"name":"Suppress all mapc warnings","description":"Compile `.xcmappingmodel` files into `.cdm` without reporting warnings.","type":"Boolean","default_value":"NO","category":"Warnings","values":null,"command_line_arguments":null},"MAPC_MODULE":{"name":null,"description":null,"type":"String","default_value":"$(PRODUCT_MODULE_NAME)","category":null,"values":null,"command_line_arguments":null},"PER_STYLE_BUILD_DIRECTORIES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"FILE_LIST":{"name":null,"description":null,"type":"Path","default_value":"$(OBJECT_FILE_DIR)/LinkFileList","category":null,"values":null,"command_line_arguments":null},"DO_HEADER_SCANNING_IN_JAM":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"PRECOMP_DESTINATION_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/PrefixHeaders","category":null,"values":null,"command_line_arguments":null},"PREFIX_CFLAG_BASE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"PREFIX_REFERENCE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"SigningCert":{"name":null,"description":null,"type":"string","default_value":null,"category":null,"values":null,"command_line_arguments":null},"InfoPlistPath":{"name":null,"description":null,"type":"path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"COMPRESS_PNG_FILES":{"name":"Compress PNG Files","description":"If enabled, PNG resource files are compressed as they are copied.","type":"Boolean","default_value":"YES","category":"Packaging","values":null,"command_line_arguments":{"YES":["-compress"],"NO":[]}},"STRIP_PNG_TEXT":{"name":"Remove Text Metadata From PNG Files","description":"Metadata in the form of text chunks in PNG files will be removed to reduce their footprint on disk.","type":"Boolean","default_value":"YES","category":"Packaging","values":null,"command_line_arguments":{"YES":["-strip-PNG-text"],"NO":[]}},"DSYMUTIL_VERBOSE":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"ACTION":{"name":"Active Build Action","description":"A string identifying the build system action being performed.","type":"string","default_value":"","category":null,"values":null,"command_line_arguments":null},"BUILD_COMPONENTS":{"name":"Active Build Components","description":"A list of components being built during this action.","type":"stringlist","default_value":"","category":null,"values":null,"command_line_arguments":null},"PROJECT_NAME":{"name":"Project Name","description":"The name of the current project.","type":"string","default_value":"","category":null,"values":null,"command_line_arguments":null},"TARGET_NAME":{"name":"Target Name","description":"The name of the current target.","type":"string","default_value":"","category":null,"values":null,"command_line_arguments":null},"ADDITIONAL_SDKS":{"name":"Additional SDKs","description":"The locations of any sparse SDKs that should be layered on top of the one specified by [Base SDK (SDKROOT)](itcaec37c2a6.html#devabcaadbaf). If more than one SDK is listed, the first one has highest precedence. Every SDK specified in this setting should be a \"sparse\" SDK, for example, not an SDK for an entire macOS release.","type":"StringList","default_value":"","category":"Architectures","values":null,"command_line_arguments":null},"SUPPORTED_PLATFORMS":{"name":"Supported Platforms","description":"The list of supported platforms from which a base SDK can be used. This setting is used if the product can be built for multiple platforms using different SDKs.","type":"stringlist","default_value":"","category":"Architectures","values":null,"command_line_arguments":null},"SHARED_PRECOMPS_DIR":{"name":"Precompiled Headers Cache Path","description":"The path where precompiled prefix header files are placed during a build. Defaults to `$(OBJROOT)/SharedPrecompiledHeaders`. Using a common location allows precompiled headers to be shared between multiple projects.","type":"Path","default_value":"$(OBJROOT)/SharedPrecompiledHeaders","category":"Build Locations","values":null,"command_line_arguments":null},"USER_HEADER_SEARCH_PATHS":{"name":"User Header Search Paths","description":"This is a list of paths to folders to be searched by the compiler for included or imported user header files (those headers listed in quotes) when compiling C, Objective-C, C++, or Objective-C++. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted. See [Always Search User Paths (Deprecated) (ALWAYS\\_SEARCH\\_USER\\_PATHS)](itcaec37c2a6.html#devc34d7d3e9) for more details on how this setting is used. If the compiler doesn't support the concept of user headers, then the search paths are prepended to the any existing header search paths defined in [Header Search Paths (HEADER\\_SEARCH\\_PATHS)](itcaec37c2a6.html#dev3c9f85d97).","type":"PathList","default_value":null,"category":"Search Paths","values":null,"command_line_arguments":null},"REZ_SEARCH_PATHS":{"name":"Rez Search Paths","description":"This is a list of paths to search for files with resource manager resources. Paths are delimited by whitespace, so any paths with spaces in them need to be properly quoted.","type":"PathList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"ALWAYS_SEARCH_USER_PATHS":{"name":"Always Search User Paths (Deprecated)","description":"This setting is deprecated as of Xcode 8.3 and may not be supported in future versions. It is recommended that you disable the setting.\n\nIf enabled, both `#include \u003cheader.h\u003e`-style and `#include \"header.h\"`-style directives search the paths in [User Header Search Paths (USER\\_HEADER\\_SEARCH\\_PATHS)](itcaec37c2a6.html#deved642222b) before [Header Search Paths (HEADER\\_SEARCH\\_PATHS)](itcaec37c2a6.html#dev3c9f85d97). As a consequence, user headers, such as your own `String.h` header, have precedence over system headers when using `#include \u003cheader.h\u003e`. This is done using the `-iquote` flag for the paths provided in [User Header Search Paths (USER\\_HEADER\\_SEARCH\\_PATHS)](itcaec37c2a6.html#deved642222b). If disabled and your compiler fully supports separate user paths, user headers are only accessible with `#include \"header.h\"`-style preprocessor directives.\n\nFor backwards compatibility reasons, this setting is enabled by default. Disabling it is strongly recommended.","type":"Boolean","default_value":"YES","category":"Search Paths","values":null,"command_line_arguments":null},"ENABLE_DEFAULT_HEADER_SEARCH_PATHS":{"name":null,"description":null,"type":"bool","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"INCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES":{"name":"Sub-Directories to Include in Recursive Searches","description":"This is a list of `fnmatch()`-style patterns of file or directory names to include when performing a recursive search. By default, this is empty and is only customized when you want to provide exceptions to the list of filename patterns provided in [Sub-Directories to Exclude in Recursive Searches (EXCLUDED\\_RECURSIVE\\_SEARCH\\_PATH\\_SUBDIRECTORIES)](itcaec37c2a6.html#dev454fb3164).","type":"StringList","default_value":"","category":"Search Paths","values":null,"command_line_arguments":null},"EXCLUDED_RECURSIVE_SEARCH_PATH_SUBDIRECTORIES":{"name":"Sub-Directories to Exclude in Recursive Searches","description":"This is a list of `fnmatch()`-style patterns of file or directory names to exclude when performing a recursive search. By default, this is set to `*.nib *.lproj *.framework *.gch *.xcode (*) .DS_Store CVS .svn .git .hg`. Normally, if you override this value you should include the default values via the `$(inherited)` macro.","type":"StringList","default_value":"*.nib *.lproj *.framework *.gch *.xcode* *.xcassets (*) .DS_Store CVS .svn .git .hg *.pbproj *.pbxproj","category":"Search Paths","values":null,"command_line_arguments":null},"VERSIONING_SYSTEM":{"name":"Versioning System","description":"Selects the process used for version-stamping generated files.\n\n- _None:_ Use no versioning system.\n\n- _Apple Generic:_ Use the current project version setting. `apple-generic`","type":"Enumeration","default_value":"","category":"Versioning","values":["","apple-generic"],"command_line_arguments":null},"MARKETING_VERSION":{"name":"Marketing Version","description":"This setting defines the user-visible version of the project. The value corresponds to the `CFBundleShortVersionString` key in your app's Info.plist.","type":"String","default_value":"","category":"Versioning","values":null,"command_line_arguments":null},"CURRENT_PROJECT_VERSION":{"name":"Current Project Version","description":"This setting defines the current version of the project. The value must be a integer or floating point number, such as `57` or `365.8`.","type":"String","default_value":"","category":"Versioning","values":null,"command_line_arguments":null},"VERSION_INFO_PREFIX":{"name":"Versioning Name Prefix","description":"Used as a prefix for the name of the version info symbol in the generated versioning source file. If you prefix your exported symbols you will probably want to set this to the same prefix.","type":"String","default_value":"","category":"Versioning","values":null,"command_line_arguments":null},"VERSION_INFO_SUFFIX":{"name":"Versioning Name Suffix","description":"Used as a suffix for the name of the version info symbol in the generated versioning source file. This is rarely used.","type":"String","default_value":"","category":"Versioning","values":null,"command_line_arguments":null},"VERSION_INFO_BUILDER":{"name":"Versioning Username","description":"This defines a reference to the user performing a build to be included in the generated Apple Generic Versioning stub. Defaults to the value of the `USER` environment variable.","type":"String","default_value":"$(USER)","category":"Versioning","values":null,"command_line_arguments":null},"VERSION_INFO_EXPORT_DECL":{"name":"Generated Versioning Variables","description":"This defines a prefix string for the version info symbol declaration in the generated Apple Generic Versioning stub. This can be used, for example, to add an optional `export` keyword to the version symbol declaration. This should rarely be changed.","type":"String","default_value":"","category":"Versioning","values":null,"command_line_arguments":null},"VERSION_INFO_FILE":{"name":"Generated Versioning Source Filename","description":"Used to specify a name for the source file that will be generated by Apple Generic Versioning and compiled into your product. By default, this is set to `$(PRODUCT_NAME)_vers.c`.","type":"String","default_value":"$(PRODUCT_NAME)_vers.c","category":"Versioning","values":null,"command_line_arguments":null},"DEBUG_INFORMATION_FORMAT":{"name":"Debug Information Format","description":"The type of debug information to produce.\n\n- _DWARF:_ Object files and linked products will use DWARF as the debug information format. `dwarf`\n\n- _DWARF with dSYM File:_ Object files and linked products will use DWARF as the debug information format, and Xcode will also produce a dSYM file containing the debug information from the individual object files (except that a dSYM file is not needed and will not be created for static library or object file products). `dwarf-with-dsym`","type":"Enumeration","default_value":"dwarf","category":"BuildOptions","values":[{"Value":"dwarf"},{"Value":"dwarf-with-dsym"}],"command_line_arguments":null},"DWARF_DSYM_FILE_NAME":{"name":null,"description":null,"type":"String","default_value":"$(FULL_PRODUCT_NAME).dSYM","category":null,"values":null,"command_line_arguments":null},"DWARF_DSYM_FOLDER_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(CONFIGURATION_BUILD_DIR)","category":null,"values":null,"command_line_arguments":null},"DWARF_DSYM_FILE_SHOULD_ACCOMPANY_PRODUCT":{"name":null,"description":null,"type":"bool","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"COLOR_DIAGNOSTICS":{"name":null,"description":null,"type":"bool","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"SCAN_ALL_SOURCE_FILES_FOR_INCLUDES":{"name":"Scan All Source Files for Includes","description":"Activating this setting will cause all source files to be scanned for includes (for example, of header files) when computing the dependency graph, in which case if an included file is changed then the including file will be rebuilt next time a target containing it is built. Normally only certain types of files, such as C-language source files, are scanned.\n\nThis setting is useful if your project contains files of unusual types, which are compiled using a custom build rule.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"ENABLE_BITCODE":{"name":"Enable Bitcode","description":"Activating this setting indicates that the target or project should generate bitcode during compilation for platforms and architectures that support it. For Archive builds, bitcode will be generated in the linked binary for submission to the App Store. For other builds, the compiler and linker will check whether the code complies with the requirements for bitcode generation, but will not generate actual bitcode.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"HIDE_BITCODE_SYMBOLS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"BITCODE_GENERATION_MODE":{"name":null,"description":null,"type":"Enumeration","default_value":"marker","category":null,"values":[{"Value":"marker"},{"Value":"bitcode"}],"command_line_arguments":null},"STRIP_BITCODE_FROM_COPIED_FILES":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR":{"name":"Precompiled Header Uses Files From Build Directory","description":"This setting allows for better control of sharing precompiled prefix header files between projects. By default, Xcode assumes that the prefix header file may include header files from the build directory if the build directory is outside of the project directory. Xcode cannot determine this ahead of time since other projects may not have been built into the shared build directory at the time the information is needed.\n\nIf your prefix file never includes files from the build directory you may set this to `NO` to improve sharing of precompiled headers. If the prefix does use files from a build directory that is inside your project directory, you may set this to `YES` to avoid unintended sharing that may result in build failures.","type":"Boolean","default_value":"YES","category":"BuildOptions","values":null,"command_line_arguments":null},"EXCLUDED_INSTALLSRC_SUBDIRECTORY_PATTERNS":{"name":null,"description":null,"type":"stringlist","default_value":".DS_Store .svn .git .hg CVS","category":null,"values":null,"command_line_arguments":null},"SEPARATE_SYMBOL_EDIT":{"name":"Separately Edit Symbols","description":"Activating this setting when the linked product's symbols are to be edited will cause editing to occur via a separate invocation of `nmedit(1)`. Otherwise editing will occur during linking, if possible.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"DYLIB_CURRENT_VERSION":{"name":"Current Library Version","description":"This setting defines the current version of any framework built by the project. As with [Current Project Version (CURRENT\\_PROJECT\\_VERSION)](itcaec37c2a6.html#devd516a860b), the value must be an integer or floating point number, such as `57` or `365.8`. By default, it is set to `$(CURRENT_PROJECT_VERSION)`. See [Dynamic Library Design Guidelines](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryDesignGuidelines.html#//apple_ref/doc/uid/TP40002013-SW19) in [Dynamic Library Programming Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html) for details on assigning version numbers of dynamic libraries.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"DYLIB_COMPATIBILITY_VERSION":{"name":"Compatibility Version","description":"Determines the compatibility version of the resulting library, bundle, or framework binary. See [Dynamic Library Design Guidelines](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryDesignGuidelines.html#//apple_ref/doc/uid/TP40002013-SW19) in [Dynamic Library Programming Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html) for details on assigning version numbers of dynamic libraries.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"DYLIB_INSTALL_NAME_BASE":{"name":"Dynamic Library Install Name Base","description":"Sets the base value for the internal `install path` (`LC_ID_DYLIB`) in a dynamic library. This will be combined with the [EXECUTABLE\\_PATH](itcaec37c2a6.html#dev5a0a1bb80) to form the full install path. Setting [Dynamic Library Install Name (LD\\_DYLIB\\_INSTALL\\_NAME)](itcaec37c2a6.html#devbb966571b) directly will override this setting. This setting defaults to the target's [Installation Directory (INSTALL\\_PATH)](itcaec37c2a6.html#devabd541cd5). It is ignored when building any product other than a dynamic library.","type":"String","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"SECTORDER_FLAGS":{"name":"Symbol Ordering Flags","description":"These flags are typically used to specify options for ordering symbols within segments, for example the `-sectorder` option to `ld`.\n\nGenerally you should not specify symbol ordering options in Debug or Development configurations, as this will make the linked binary less readable to the debugger. Use them only in Release or Deployment configurations.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"WARNING_LDFLAGS":{"name":"Warning Linker Flags","description":"These flags are passed with linker invocations, and by default give the `-no_arch_warnings` flag to the linker to avoid many warnings being generated during multi-architecture builds.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"OTHER_LDFLAGS":{"name":"Other Linker Flags","description":"Options defined in this setting are passed to invocations of the linker.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"OTHER_LIBTOOLFLAGS":{"name":"Other Librarian Flags","description":"Options defined in this setting are passed to all invocations of the archive librarian, which is used to generate static libraries.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"GENERATE_MASTER_OBJECT_FILE":{"name":"Perform Single-Object Prelink","description":"Activating this setting will cause the object files built by a target to be prelinked using `ld -r` into a single object file, and that object file will then be linked into the final product. This is useful to force the linker to resolve symbols and link the object files into a single module before building a static library. Also, a separate set of link flags can be applied to the prelink allowing additional control over, for instance, exported symbols.","type":"Boolean","default_value":"NO","category":"Linking","values":null,"command_line_arguments":null},"PRELINK_LIBS":{"name":"Prelink libraries","description":"Additional libraries to pass when performing a single-object prelink.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"PRELINK_FLAGS":{"name":"Single-Object Prelink Flags","description":"Additional flags to pass when performing a single-object prelink.","type":"StringList","default_value":"","category":"Linking","values":null,"command_line_arguments":null},"PRODUCT_BUNDLE_IDENTIFIER":{"name":"Product Bundle Identifier","description":"A string that uniquely identifies the bundle. The string should be in reverse DNS format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist` of the built bundle.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"PRODUCT_NAME":{"name":"Product Name","description":"This is the basename of the product generated by the target.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"EXECUTABLE_PREFIX":{"name":"Executable Prefix","description":"The prefix used for the executable product generated by the target, which has a default value based on the product type.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"EXECUTABLE_EXTENSION":{"name":"Executable Extension","description":"This is the extension used for the executable product generated by the target, which has a default value based on the product type.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"WRAPPER_EXTENSION":{"name":"Wrapper Extension","description":"The extension used for product wrappers, which has a default value based on the product type.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"CURRENT_VERSION":{"name":null,"description":null,"type":"string","default_value":"","category":null,"values":null,"command_line_arguments":null},"VERSIONS_FOLDER_PATH":{"name":null,"description":null,"type":"string","default_value":"","category":null,"values":null,"command_line_arguments":null},"PRIVATE_HEADERS_FOLDER_PATH":{"name":"Private Headers Folder Path","description":"The location to copy the private headers to during building, relative to the built products folder.","type":"Path","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"PUBLIC_HEADERS_FOLDER_PATH":{"name":"Public Headers Folder Path","description":"The location to copy the public headers to during building, relative to the built products folder.","type":"Path","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"GENERATE_PKGINFO_FILE":{"name":"Force Package Info Generation","description":"Forces the `PkgInfo` file to be written to wrapped products even if this file is not expected.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"DONT_GENERATE_INFOPLIST_FILE":{"name":"Don't Force Info.plist Generation","description":"If enabled, don't automatically generate an Info.plist file for wrapped products when the [Info.plist File (INFOPLIST\\_FILE)](itcaec37c2a6.html#dev131d2e1c2) build setting is empty.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"INFOPLIST_FILE":{"name":"Info.plist File","description":"The project-relative path to the property list file that contains the `Info.plist` information used by bundles. For details on information property list files, see [Information Property List Files](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/ConfigFiles.html#//apple_ref/doc/uid/20002091-CJBJIEDH) in [Runtime Configuration Guidelines](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPRuntimeConfig/000-Introduction/introduction.html).","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"INFOPLIST_PREPROCESS":{"name":"Preprocess Info.plist File","description":"Preprocess the `Info.plist` file using the C Preprocessor.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"INFOPLIST_EXPAND_BUILD_SETTINGS":{"name":"Expand Build Settings in Info.plist File","description":"Expand build settings in the `Info.plist` file.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"INFOPLIST_OUTPUT_FORMAT":{"name":"Info.plist Output Encoding","description":"Specifies the output encoding for the output `Info.plist`. The output encodings can be `binary` or `XML`. By default, the output encoding will be unchanged from the input.","type":"Enumeration","default_value":"same-as-input","category":"Packaging","values":["same-as-input","XML","binary"],"command_line_arguments":null},"CREATE_INFOPLIST_SECTION_IN_BINARY":{"name":"Create Info.plist Section in Binary","description":"Enabling this setting will create a section in the product's linked binary containing the processed `Info.plist` file for the target. This setting only applies to command-line tool targets.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"APPLY_RULES_IN_COPY_FILES":{"name":"Convert Copied Files","description":"Enabling this setting will cause files in the target's Copy Files build phases to be processed by build rules. For example, property list files (`.plist`) and strings files will be converted as specified by [Property List Output Encoding (PLIST\\_FILE\\_OUTPUT\\_FORMAT)](itcaec37c2a6.html#dev70f6976ed) and [Strings File Output Encoding (STRINGS\\_FILE\\_OUTPUT\\_ENCODING)](itcaec37c2a6.html#dev8d71dff90), respectively.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"REMOVE_HEADERS_FROM_EMBEDDED_BUNDLES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"INFOPLIST_PREFIX_HEADER":{"name":"Info.plist Preprocessor Prefix File","description":"Implicitly include the given file when preprocessing the `Info.plist` file. The path given should either be a project relative path or an absolute path.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"INFOPLIST_OTHER_PREPROCESSOR_FLAGS":{"name":"Info.plist Other Preprocessor Flags","description":"Other flags to pass to the C preprocessor when preprocessing the `Info.plist` file.","type":"StringList","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"INFOPLIST_PREPROCESSOR_DEFINITIONS":{"name":"Info.plist Preprocessor Definitions","description":"Space-separated list of preprocessor macros of the form `foo` or `foo=bar`. These macros are used when preprocessing the `Info.plist` file.","type":"StringList","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"DEPLOYMENT_LOCATION":{"name":"Deployment Location","description":"If enabled, built products are placed in their installed locations in addition to the built products folder.","type":"Boolean","default_value":"NO","category":"Deployment","values":null,"command_line_arguments":null},"DEPLOYMENT_POSTPROCESSING":{"name":"Deployment Postprocessing","description":"If enabled, indicates that binaries should be stripped and file mode, owner, and group information should be set to standard values.","type":"Boolean","default_value":"NO","category":"Deployment","values":null,"command_line_arguments":null},"INSTALL_PATH":{"name":"Installation Directory","description":"The directory in which to install the build products. This path is prepended by the [Installation Build Products Location (DSTROOT)](itcaec37c2a6.html#dev438d356c2).","type":"String","default_value":"","category":"Deployment","values":null,"command_line_arguments":null},"SYSTEM_KEXT_INSTALL_PATH":{"name":null,"description":null,"type":"string","default_value":"$(SYSTEM_LIBRARY_DIR)/Extensions","category":null,"values":null,"command_line_arguments":null},"SYSTEM_DEXT_INSTALL_PATH":{"name":null,"description":null,"type":"string","default_value":"$(SYSTEM_LIBRARY_DIR)/DriverExtensions","category":null,"values":null,"command_line_arguments":null},"LIBRARY_KEXT_INSTALL_PATH":{"name":null,"description":null,"type":"string","default_value":"$(LOCAL_LIBRARY_DIR)/Extensions","category":null,"values":null,"command_line_arguments":null},"LIBRARY_DEXT_INSTALL_PATH":{"name":null,"description":null,"type":"string","default_value":"$(LOCAL_LIBRARY_DIR)/DriverExtensions","category":null,"values":null,"command_line_arguments":null},"DEFAULT_KEXT_INSTALL_PATH":{"name":null,"description":null,"type":"string","default_value":"$(SYSTEM_KEXT_INSTALL_PATH)","category":null,"values":null,"command_line_arguments":null},"DEFAULT_DEXT_INSTALL_PATH":{"name":null,"description":null,"type":"string","default_value":"$(SYSTEM_DEXT_INSTALL_PATH)","category":null,"values":null,"command_line_arguments":null},"SKIP_INSTALL":{"name":"Skip Install","description":"If enabled, don't install built products even if deployment locations are active.","type":"Boolean","default_value":"NO","category":"Deployment","values":null,"command_line_arguments":null},"SEPARATE_STRIP":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"ALTERNATE_PERMISSIONS_FILES":{"name":"Alternate Permissions Files","description":"List of files to which the alternate owner, group and permissions are applied.","type":"StringList","default_value":"","category":"Deployment","values":null,"command_line_arguments":null},"ALTERNATE_OWNER":{"name":"Alternate Install Owner","description":"The owner name or uid for the files listed under the [Alternate Permissions Files (ALTERNATE\\_PERMISSIONS\\_FILES)](itcaec37c2a6.html#dev40b8becae) setting.","type":"String","default_value":"$(INSTALL_OWNER)","category":"Deployment","values":null,"command_line_arguments":null},"ALTERNATE_GROUP":{"name":"Alternate Install Group","description":"The group name or gid for the files listed under the [Alternate Permissions Files (ALTERNATE\\_PERMISSIONS\\_FILES)](itcaec37c2a6.html#dev40b8becae) setting.","type":"String","default_value":"$(INSTALL_GROUP)","category":"Deployment","values":null,"command_line_arguments":null},"ALTERNATE_MODE":{"name":"Alternate Install Permissions","description":"Permissions used for the files listed under the [Alternate Permissions Files (ALTERNATE\\_PERMISSIONS\\_FILES)](itcaec37c2a6.html#dev40b8becae) setting.","type":"String","default_value":"$(INSTALL_MODE_FLAG)","category":"Deployment","values":null,"command_line_arguments":null},"TEST_HOST":{"name":"Test Host","description":"Path to the executable into which a bundle of tests is injected. Only specify this setting if testing an application or other executable.","type":"String","default_value":"","category":"UnitTesting","values":null,"command_line_arguments":null},"TREAT_MISSING_BASELINES_AS_TEST_FAILURES":{"name":"Treat missing baselines as test failures","description":"When running tests that measure performance via `XCTestCase`, report missing baselines as test failures.","type":"Boolean","default_value":"NO","category":"UnitTesting","values":null,"command_line_arguments":null},"EXCLUDED_SOURCE_FILE_NAMES":{"name":"Excluded Source File Names","description":"A list of patterns (as defined by `fnmatch(3)`) specifying the names of source files to explicitly _exclude_ when processing the files in the target's build phases (see also [Included Source File Names (INCLUDED\\_SOURCE\\_FILE\\_NAMES)](itcaec37c2a6.html#dev278eb3050)). This setting can be used to define complex filters for which files from the phase should be built in response to other build settings; for example, a value of `*.$(CURRENT_ARCH).c` could serve to exclude particular files based on the architecture being built.","type":"StringList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"INCLUDED_SOURCE_FILE_NAMES":{"name":"Included Source File Names","description":"A list of patterns (as defined by `fnmatch(3)`) specifying the names of source files to explicitly _include_ when processing the files in the target's build phases. This setting is only useful when combined with [Excluded Source File Names (EXCLUDED\\_SOURCE\\_FILE\\_NAMES)](itcaec37c2a6.html#devd20926192), and can be used to define complex filters for which files from the phase should be built in response to other build settings.","type":"StringList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"MODULE_NAME":{"name":"Module Identifier","description":"This is the identifier of the kernel module listed in the generated stub. This is only used when building kernel extensions.","type":"String","default_value":"","category":"KernelModule","values":null,"command_line_arguments":null},"MODULE_VERSION":{"name":"Module Version","description":"This is the version of the kernel module listed in the generated stub. This is only used when building kernel extensions.","type":"String","default_value":"","category":"KernelModule","values":null,"command_line_arguments":null},"MODULE_START":{"name":"Module Start Routine","description":"This defines the name of the kernel module start routine. This is only used when building kernel extensions.","type":"String","default_value":"","category":"KernelModule","values":null,"command_line_arguments":null},"MODULE_STOP":{"name":"Module Stop Routine","description":"This defines the name of the kernel module stop routine. This is only used when building kernel extensions.","type":"String","default_value":"","category":"KernelModule","values":null,"command_line_arguments":null},"HOME":{"name":null,"description":null,"type":"path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"LOGNAME":{"name":null,"description":null,"type":"string","default_value":null,"category":null,"values":null,"command_line_arguments":null},"PWD":{"name":null,"description":null,"type":"path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SHELL":{"name":null,"description":null,"type":"path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"USER":{"name":null,"description":null,"type":"string","default_value":null,"category":null,"values":null,"command_line_arguments":null},"METAL_LIBRARY_FILE_BASE":{"name":null,"description":null,"type":"string","default_value":"default","category":null,"values":null,"command_line_arguments":null},"METAL_LIBRARY_OUTPUT_DIR":{"name":null,"description":null,"type":"string","default_value":"$(TARGET_BUILD_DIR)/$(UNLOCALIZED_RESOURCES_FOLDER_PATH)","category":null,"values":null,"command_line_arguments":null},"ARCHS":{"name":"Architectures","description":"A list of the architectures for which the product will be built. This is usually set to a predefined build setting provided by the platform. If more than one architecture is specified, a universal binary will be produced.","type":"StringList","default_value":"$(ARCHS_STANDARD)","category":"Architectures","values":null,"command_line_arguments":null},"ONLY_ACTIVE_ARCH":{"name":"Build Active Architecture Only","description":"If enabled, only the active architecture is built. This setting will be ignored when building with a run destination which does not define a specific architecture, such as a 'Generic Device' run destination.","type":"Boolean","default_value":"NO","category":"Architectures","values":null,"command_line_arguments":null},"VALID_ARCHS":{"name":"Valid Architectures","description":"A space-separated list of architectures for which the target should actually be built. For each target, this is intersected with the list specified in [Architectures (ARCHS)](itcaec37c2a6.html#devf0a9d5aca), and the resulting set is built. This allows individual targets to opt out of building for particular architectures. If the resulting set of architectures is empty, no executable will be produced.","type":"StringList","default_value":null,"category":"Architectures","values":null,"command_line_arguments":null},"EXCLUDED_ARCHS":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"ARCHS_STANDARD_32_64_BIT":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"ARCHS_STANDARD_32_BIT":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"ARCHS_STANDARD_64_BIT":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"SYMROOT":{"name":"Build Products Path","description":"The path at which all products will be placed when performing a build. Typically this path is not set per target, but is set per-project or per-user. By default, this is set to `$(PROJECT_DIR)/build`.","type":"Path","default_value":"build","category":"Build Locations","values":null,"command_line_arguments":null},"OBJROOT":{"name":"Intermediate Build Files Path","description":"The path where intermediate files will be placed during a build. Intermediate files include generated sources, object files, etc. Shell script build phases can place and access files here, as well. Typically this path is not set per target, but is set per project or per user. By default, this is set to `$(PROJECT_DIR)/build`.","type":"Path","default_value":"$(SYMROOT)","category":"Build Locations","values":null,"command_line_arguments":null},"LOCROOT":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"LOCSYMROOT":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"CONFIGURATION_BUILD_DIR":{"name":"Per-configuration Build Products Path","description":"The base path where build products will be placed during a build for a given configuration. By default, this is set to `$(BUILD_DIR)/$(CONFIGURATION)`.","type":"Path","default_value":"$(BUILD_DIR)","category":null,"values":null,"command_line_arguments":null},"CONFIGURATION_TEMP_DIR":{"name":"Per-configuration Intermediate Build Files Path","description":"The base path where intermediates will be placed during a build for a given configuration. By default, this is set to `$(PROJECT_TEMP_DIR)/$(CONFIGURATION)`.","type":"Path","default_value":"$(PROJECT_TEMP_DIR)","category":null,"values":null,"command_line_arguments":null},"MODULE_CACHE_DIR":{"name":null,"description":"Absolute path of folder in which compiler stores its cached modules—this cache is a performance improvement.","type":"Path","default_value":"$(DERIVED_DATA_DIR)/ModuleCache.noindex","category":null,"values":null,"command_line_arguments":null},"BUILD_VARIANTS":{"name":"Build Variants","description":"A list of the build variants of the linked binary that will be produced. By default, only the `normal` variant is produced. Other common values include `debug` and `profile`.","type":"StringList","default_value":"normal","category":"BuildOptions","values":null,"command_line_arguments":null},"REEXPORTED_LIBRARY_INSTALL_NAMES":{"name":null,"description":null,"type":"PathList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"REEXPORTED_FRAMEWORK_INSTALL_NAMES":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"LIBRARY_FLAG_NOSPACE":{"name":null,"description":null,"type":"bool","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"LIBRARY_FLAG_PREFIX":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"SUPPORTS_TEXT_BASED_API":{"name":"Supports Text-Based InstallAPI","description":"Enable to indicate that the target supports `Text-Based InstallAPI`, which will enable its generation during `install` builds.","type":"Boolean","default_value":"NO","category":"Text-Based API","values":null,"command_line_arguments":null},"GENERATE_TEXT_BASED_STUBS":{"name":"Enable Text-Based Stubs Generation","description":"Enables the generation of Text-Based stubs for dynamic libraries and frameworks.","type":"bool","default_value":"NO","category":"Text-Based API","values":null,"command_line_arguments":null},"CODE_SIGNING_ALLOWED":{"name":null,"description":null,"type":"bool","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"CODE_SIGN_IDENTITY":{"name":"Code Signing Identity","description":"The name, also known as the _common name_, of a valid code-signing certificate in a keychain within your keychain path. A missing or invalid certificate will cause a build error.","type":"CodeSignIdentity","default_value":"","category":null,"values":null,"command_line_arguments":null},"CODE_SIGN_STYLE":{"name":"Code Sign Style","description":"This setting specifies the method used to acquire and locate signing assets. Choose `Automatic` to let Xcode automatically create and update profiles, app IDs, and certificates. Choose `Manual` to create and update these yourself on the developer website.","type":"CodeSignStyle","default_value":"","category":"Code Signing","values":["","Automatic","Manual"],"command_line_arguments":null},"DEVELOPMENT_TEAM":{"name":"Development Team","description":"The team ID of a development team to use for signing certificates and provisioning profiles.","type":"DevelopmentTeam","default_value":"","category":"Code Signing","values":null,"command_line_arguments":null},"PROVISIONING_PROFILE_SPECIFIER":{"name":"Provisioning Profile","description":"Must contain a profile name (or UUID). A missing or invalid profile will cause a build error. Use in conjunction with [Development Team (DEVELOPMENT\\_TEAM)](itcaec37c2a6.html#dev186481df2) to fully specify provisioning profile.","type":"ProvisioningProfileSpecifier","default_value":"","category":"Code Signing","values":null,"command_line_arguments":null},"OTHER_CODE_SIGN_FLAGS":{"name":"Other Code Signing Flags","description":"A list of additional options to pass to `codesign(1)`.","type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"CODE_SIGN_ENTITLEMENTS":{"name":"Code Signing Entitlements","description":"The path to a file specifying code-signing entitlements.","type":"String","default_value":"","category":"Code Signing","values":null,"command_line_arguments":null},"CODE_SIGN_INJECT_BASE_ENTITLEMENTS":{"name":"Code Signing Inject Base Entitlements","description":"Automatically inject entitlements from the platform's BaseEntitlements.plist into the code signatures of executables.","type":"Boolean","default_value":"YES","category":"Code Signing","values":null,"command_line_arguments":null},"CODE_SIGN_LOCAL_EXECUTION_IDENTITY":{"name":null,"description":null,"type":"Enumeration","default_value":"","category":null,"values":["","Ad Hoc","Local Certificate"],"command_line_arguments":null},"ENABLE_HARDENED_RUNTIME":{"name":"Enable Hardened Runtime","description":"Enable hardened runtime restrictions.","type":"Boolean","default_value":"NO","category":"Code Signing","values":null,"command_line_arguments":null},"ENTITLEMENTS_DESTINATION":{"name":null,"description":null,"type":"Enumeration","default_value":"","category":null,"values":["","Signature","__entitlements"],"command_line_arguments":null},"EMBEDDED_PROFILE_NAME":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"PRODUCT_MODULE_NAME":{"name":"Product Module Name","description":"The name to use for the source code module constructed for this target, and which will be used to import the module in implementation source files. Must be a valid identifier.","type":"String","default_value":"$(PRODUCT_NAME:c99extidentifier)","category":"Packaging","values":null,"command_line_arguments":null},"FULL_PRODUCT_NAME":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"APPLY_RULES_IN_COPY_HEADERS":{"name":"Process Header Files","description":"Enabling this setting will cause all Public and Private headers in the target's Copy Headers build phase to be processed by build rules. This allows custom build rules to be defined to process these headers. Custom script rules can define their outputs relative to `HEADER_OUTPUT_DIR`, which will be provided to that script, taking the header visibility into account. The scripts are also passed `SCRIPT_HEADER_VISIBILITY` (\"public\" or \"private\"). Files that should not be processed by build rules may need to be moved to a Copy Files build phase when this setting is enabled.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"DEFINES_MODULE":{"name":"Defines Module","description":"If enabled, the product will be treated as defining its own module. This enables automatic production of LLVM module map files when appropriate, and allows the product to be imported as a module.","type":"Boolean","default_value":"NO","category":"Packaging","values":null,"command_line_arguments":null},"MODULEMAP_FILE":{"name":"Module Map File","description":"This is the project-relative path to the LLVM module map file that defines the module structure for the compiler. If empty, it will be automatically generated for appropriate products when [Defines Module (DEFINES\\_MODULE)](itcaec37c2a6.html#dev82471c743) is enabled.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"MODULEMAP_PRIVATE_FILE":{"name":"Private Module Map File","description":"This is the project-relative path to the LLVM module map file that defines the module structure for private headers.","type":"String","default_value":"","category":"Packaging","values":null,"command_line_arguments":null},"FRAMEWORK_VERSION":{"name":"Framework Version","description":"Framework bundles are versioned by having contents in subfolders of a version folder that has links to the current version and its contents.","type":"String","default_value":"A","category":"Packaging","values":null,"command_line_arguments":null},"DEVELOPMENT_ASSET_PATHS":{"name":"Development Assets","description":"Files and directories used only for development. Archive and install builds will exclude this content.","type":"StringList","default_value":"","category":"Deployment","values":null,"command_line_arguments":null},"DSTROOT":{"name":"Installation Build Products Location","description":"The path at which all products will be rooted when performing an install build. For instance, to install your products on the system proper, set this path to `/`. Defaults to `/tmp/$(PROJECT_NAME).dst` to prevent a _test_ install build from accidentally overwriting valid and needed data in the ultimate install path.\n\nTypically this path is not set per target, but is provided as an option on the command line when performing an `xcodebuild install`. It may also be set in a build configuration in special circumstances.","type":"Path","default_value":"/tmp/$(PROJECT_NAME).dst","category":"Deployment","values":null,"command_line_arguments":null},"STRIP_INSTALLED_PRODUCT":{"name":"Strip Linked Product","description":"If enabled, the linked product of the build will be stripped of symbols when performing deployment postprocessing.","type":"Boolean","default_value":"","category":"Deployment","values":null,"command_line_arguments":null},"INSTALL_OWNER":{"name":"Install Owner","description":"The owner name or `uid` for installed products.","type":"String","default_value":"$(USER)","category":"Deployment","values":null,"command_line_arguments":null},"INSTALL_GROUP":{"name":"Install Group","description":"The group name or `gid` for installed products.","type":"String","default_value":"$(GROUP)","category":"Deployment","values":null,"command_line_arguments":null},"INSTALL_MODE_FLAG":{"name":"Install Permissions","description":"Permissions used for installed product files.","type":"String","default_value":"u+w,go-w,a+rX","category":"Deployment","values":null,"command_line_arguments":null},"BUILD_STYLE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"CONFIGURATION":{"name":null,"description":"Identifies the build configuration, such as `Debug` or `Release`, that the target uses to generate the product.","type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"SRCROOT":{"name":null,"description":"Identifies the directory containing the target’s source files.","type":"Path","default_value":".","category":null,"values":null,"command_line_arguments":null},"SOURCE_ROOT":{"name":null,"description":null,"type":"Path","default_value":"$(SRCROOT)","category":null,"values":null,"command_line_arguments":null},"TEMP_ROOT":{"name":null,"description":null,"type":"Path","default_value":"$(OBJROOT)","category":null,"values":null,"command_line_arguments":null},"BUILD_ROOT":{"name":null,"description":null,"type":"Path","default_value":"$(SYMROOT)","category":null,"values":null,"command_line_arguments":null},"INSTALL_ROOT":{"name":null,"description":null,"type":"Path","default_value":"$(DSTROOT)","category":null,"values":null,"command_line_arguments":null},"PROJECT_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(SRCROOT)","category":null,"values":null,"command_line_arguments":null},"BUILD_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(SYMROOT)","category":null,"values":null,"command_line_arguments":null},"PROJECT_TEMP_ROOT":{"name":null,"description":null,"type":"Path","default_value":"$(OBJROOT)","category":null,"values":null,"command_line_arguments":null},"PROJECT_TEMP_DIR":{"name":null,"description":"Identifies the directory in which the project’s intermediate build files are placed. This directory is shared between all the targets defined by the project. Run Script build phases should generate intermediate build files in the directory identified by `DERIVED_FILE_DIR`, not the location this build setting specifies.","type":"Path","default_value":"$(PROJECT_TEMP_ROOT)/$(PROJECT_NAME).build","category":null,"values":null,"command_line_arguments":null},"TEMP_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)","category":null,"values":null,"command_line_arguments":null},"OBJECT_FILE_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/Objects","category":null,"values":null,"command_line_arguments":null},"CLASS_FILE_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/JavaClasses","category":null,"values":null,"command_line_arguments":null},"DERIVED_FILE_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/DerivedSources","category":null,"values":null,"command_line_arguments":null},"LOCALIZABLE_CONTENT_DIR":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"INSTALL_DIR":{"name":null,"description":"Identifies the directory in the developer’s filesystem into which the *installed* product is placed.","type":"Path","default_value":"$(DSTROOT)$(INSTALL_PATH)","category":null,"values":null,"command_line_arguments":null},"PROJECT_DERIVED_FILE_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(OBJROOT)/$(PROJECT_NAME).build/DerivedSources","category":null,"values":null,"command_line_arguments":null},"SHARED_DERIVED_FILE_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(BUILT_PRODUCTS_DIR)/DerivedSources","category":null,"values":null,"command_line_arguments":null},"TARGET_BUILD_SUBPATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"BUILT_PRODUCTS_DIR":{"name":null,"description":"Identifies the directory under which all the product’s files can be found. This directory contains either product files or symbolic links to them. Run Script build phases can use the value of this build setting as a convenient way to refer to the product files built by one or more targets even when these files are scattered throughout a directory hierarchy (for example, when `DEPLOYMENT_LOCATION` is set to `YES`.","type":"Path","default_value":"$(CONFIGURATION_BUILD_DIR)","category":null,"values":null,"command_line_arguments":null},"ENABLE_HEADER_DEPENDENCIES":{"name":null,"description":"Specifies whether to automatically track dependencies on included header files.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"PATH_PREFIXES_EXCLUDED_FROM_HEADER_DEPENDENCIES":{"name":null,"description":null,"type":"PathList","default_value":"/usr/include /usr/local/include /System/Library/Frameworks /System/Library/PrivateFrameworks $(SYSTEM_DEVELOPER_DIR)/Headers $(SYSTEM_DEVELOPER_DIR)/SDKs $(SYSTEM_DEVELOPER_DIR)/Platforms","category":null,"values":null,"command_line_arguments":null},"TEMP_FILE_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)","category":null,"values":null,"command_line_arguments":null},"TEMP_FILES_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TEMP_FILE_DIR)","category":null,"values":null,"command_line_arguments":null},"DERIVED_SOURCES_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(DERIVED_FILE_DIR)","category":null,"values":null,"command_line_arguments":null},"NATIVE_ARCH":{"name":null,"description":"Identifies the architecture on which the build is being performed.","type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"NATIVE_ARCH_32_BIT":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"NATIVE_ARCH_64_BIT":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"NATIVE_ARCH_ACTUAL":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"DEBUGGING_SYMBOLS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"PROFILING_CODE":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"KEXT_CFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"KEXT_CPLUSPLUSFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"$(KEXT_CFLAGS)","category":null,"values":null,"command_line_arguments":null},"CC":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"JAVA_COMPILER":{"name":null,"description":null,"type":"Path","default_value":"/usr/bin/javac","category":null,"values":null,"command_line_arguments":null},"JAVA_ARCHIVE_CLASSES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"JAVA_ARCHIVE_TYPE":{"name":null,"description":null,"type":"String","default_value":"JAR","category":null,"values":null,"command_line_arguments":null},"JAVA_APP_STUB":{"name":null,"description":null,"type":"Path","default_value":"$(SYSTEM_LIBRARY_DIR)/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub","category":null,"values":null,"command_line_arguments":null},"JAVA_JAR_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"cv","category":null,"values":null,"command_line_arguments":null},"JAVA_SOURCE_SUBDIR":{"name":null,"description":null,"type":"Path","default_value":".","category":null,"values":null,"command_line_arguments":null},"JAVA_FRAMEWORK_RESOURCES_DIRS":{"name":null,"description":null,"type":"PathList","default_value":"Resources","category":null,"values":null,"command_line_arguments":null},"JAVA_FRAMEWORK_JARS":{"name":null,"description":null,"type":"PathList","default_value":"","category":null,"values":null,"command_line_arguments":null},"JAVA_USE_DEPENDENCIES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"JAVA_ZIP_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"-urg","category":null,"values":null,"command_line_arguments":null},"CLONE_HEADERS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"GCC_VERSION":{"name":"Compiler for C/C++/Objective-C","description":"The compiler to use for C, C++, and Objective-C.","type":"CompilerVersion","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"GCC3_VERSION":{"name":null,"description":null,"type":"String","default_value":"3.3","category":null,"values":null,"command_line_arguments":null},"DEFAULT_COMPILER":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"MAC_OS_X_VERSION_MAX_ALLOWED":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"MAC_OS_X_VERSION_MIN_REQUIRED":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"HEADERMAP_INCLUDES_NONPUBLIC_NONPRIVATE_HEADERS":{"name":null,"description":null,"type":"Boolean","default_value":"$(HEADERMAP_INCLUDES_PROJECT_HEADERS)","category":null,"values":null,"command_line_arguments":null},"HEADERMAP_INCLUDES_FRAMEWORK_ENTRIES_FOR_ALL_PRODUCT_TYPES":{"name":null,"description":"Specifies whether the header map contains a framework-name/path entry for every header in the target being built, including targets that do not build frameworks.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"HEADERMAP_INCLUDES_FLAT_ENTRIES_FOR_TARGET_BEING_BUILT":{"name":null,"description":"Specifies whether the header map contains a name/path entry for every header in the target being built.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"HEADERMAP_INCLUDES_PROJECT_HEADERS":{"name":null,"description":"Specifies whether the header map contains a name/path entry for every header in the project, regardless of the headers’ target membership.","type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"HEADERMAP_USES_FRAMEWORK_PREFIX_ENTRIES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"HEADERMAP_USES_VFS":{"name":null,"description":null,"type":"Boolean","default_value":"$(DEFINES_MODULE)","category":null,"values":null,"command_line_arguments":null},"BUNDLE_CONTENTS_FOLDER_PATH":{"name":null,"description":null,"type":"String","default_value":"$(BUNDLE_CONTENTS_FOLDER_PATH_$(BUNDLE_FORMAT))","category":null,"values":null,"command_line_arguments":null},"BUNDLE_CONTENTS_FOLDER_PATH_deep":{"name":null,"description":null,"type":"String","default_value":"Contents/","category":null,"values":null,"command_line_arguments":null},"BUNDLE_EXECUTABLE_FOLDER_PATH":{"name":null,"description":null,"type":"String","default_value":"$(BUNDLE_CONTENTS_FOLDER_PATH)$(BUNDLE_EXECUTABLE_FOLDER_NAME_$(BUNDLE_FORMAT))","category":null,"values":null,"command_line_arguments":null},"BUNDLE_EXECUTABLE_FOLDER_NAME_deep":{"name":null,"description":null,"type":"String","default_value":"MacOS","category":null,"values":null,"command_line_arguments":null},"BUNDLE_PUBLIC_HEADERS_FOLDER_PATH":{"name":null,"description":null,"type":"String","default_value":"$(BUNDLE_CONTENTS_FOLDER_PATH)Headers","category":null,"values":null,"command_line_arguments":null},"BUNDLE_PRIVATE_HEADERS_FOLDER_PATH":{"name":null,"description":null,"type":"String","default_value":"$(BUNDLE_CONTENTS_FOLDER_PATH)PrivateHeaders","category":null,"values":null,"command_line_arguments":null},"BUNDLE_FRAMEWORKS_FOLDER_PATH":{"name":null,"description":null,"type":"String","default_value":"$(BUNDLE_CONTENTS_FOLDER_PATH)Frameworks","category":null,"values":null,"command_line_arguments":null},"BUNDLE_PLUGINS_FOLDER_PATH":{"name":null,"description":null,"type":"String","default_value":"$(BUNDLE_CONTENTS_FOLDER_PATH)PlugIns","category":null,"values":null,"command_line_arguments":null},"LLVM_TARGET_TRIPLE_OS_VERSION":{"name":null,"description":null,"type":"String","default_value":"$(SWIFT_PLATFORM_TARGET_PREFIX)$($(DEPLOYMENT_TARGET_SETTING_NAME))","category":null,"values":null,"command_line_arguments":null},"LLVM_TARGET_TRIPLE_VENDOR":{"name":null,"description":null,"type":"String","default_value":"apple","category":null,"values":null,"command_line_arguments":null},"LLVM_TARGET_TRIPLE_SUFFIX":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"SWIFT_PLATFORM_TARGET_PREFIX":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"USE_LLVM_TARGET_TRIPLES":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"USE_LLVM_TARGET_TRIPLES_FOR_CLANG":{"name":null,"description":null,"type":"Boolean","default_value":"$(USE_LLVM_TARGET_TRIPLES)","category":null,"values":null,"command_line_arguments":null},"USE_LLVM_TARGET_TRIPLES_FOR_LD":{"name":null,"description":null,"type":"Boolean","default_value":"$(USE_LLVM_TARGET_TRIPLES)","category":null,"values":null,"command_line_arguments":null},"USE_LLVM_TARGET_TRIPLES_FOR_TAPI":{"name":null,"description":null,"type":"Boolean","default_value":"$(USE_LLVM_TARGET_TRIPLES)","category":null,"values":null,"command_line_arguments":null},"COMPILER_INDEX_STORE_ENABLE":{"name":"Enable Index-While-Building Functionality","description":"Control whether the compiler should emit index data while building.","type":"Enumeration","default_value":"Default","category":"BuildOptions","values":["Default","YES","NO"],"command_line_arguments":null},"REZ_EXECUTABLE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"APPLICATION_EXTENSION_API_ONLY":{"name":"Require Only App-Extension-Safe API","description":"When enabled, this causes the compiler and linker to disallow use of APIs that are not available to app extensions and to disallow linking to frameworks that have not been built with this setting enabled.","type":"bool","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"COPY_HEADERS_RUN_UNIFDEF":{"name":"Run unifdef on Product Headers","description":"If enabled, headers are run through the `unifdef(1)` tool when copied to the product.","type":"Boolean","default_value":"NO","category":"Headers","values":null,"command_line_arguments":null},"COPY_HEADERS_UNIFDEF_FLAGS":{"name":"Unifdef Flags for Product Headers","description":"Specifies the flags to pass to `unifdef(1)` when invoking that tool to copy headers. This setting has no effect unless [Run unifdef on Product Headers (COPY\\_HEADERS\\_RUN\\_UNIFDEF)](itcaec37c2a6.html#devc2606cc19) is enabled.","type":"StringList","default_value":"","category":"Headers","values":null,"command_line_arguments":null},"INSTALLHDRS_COPY_PHASE":{"name":"Perform Copy Files Phases During `installhdrs`","description":"Specifies whether the target’s Copy Files build phases are executed in `installhdr` builds.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"INSTALLHDRS_SCRIPT_PHASE":{"name":"Perform Shell Script Phases During `installhdrs`","description":"Specifies whether the target’s Run Script build phases are executed in `installhdr` builds. See [Active Build Action (ACTION)](itcaec37c2a6.html#dev9697f81df) for details on `installhdr` builds.","type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"ENABLE_TESTABILITY":{"name":"Enable Testability","description":"When this setting is activated, the product will be built with options appropriate for running automated tests, such as making private interfaces accessible to the tests. This may result in tests running slower than they would without testability enabled.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"ENABLE_TESTING_SEARCH_PATHS":{"name":"Enable Testing Search Paths","description":"Specifies whether the build system should add the search paths necessary for compiling and linking against XCTest. This setting is enabled by default if the target is a unit test target or if the target explicitly links to the XCTest framework.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"BUILD_LIBRARY_FOR_DISTRIBUTION":{"name":"Build Libraries for Distribution","description":"Ensures that your libraries are built for distribution. For Swift, this enables support for library evolution and generation of a module interface file.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"LOCALIZED_STRING_MACRO_NAMES":{"name":"Localized String Macro Names","description":"The base names for NSLocalizedString-like macros or functions used to produce localized strings in source code. The default base names of NSLocalizedString and CFCopyLocalizedString are always considered, even if this setting is empty.","type":"StringList","default_value":"NSLocalizedString CFCopyLocalizedString","category":"Localization","values":null,"command_line_arguments":null},"LOCALIZED_STRING_SWIFTUI_SUPPORT":{"name":"Localized String Swift UI Support","description":"When enabled, literal strings passed to the Text() initializer from Swift UI will be extracted during localization export.","type":"Boolean","default_value":"YES","category":"Localization","values":null,"command_line_arguments":null},"BUILD_ACTIVE_RESOURCES_ONLY":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"ENABLE_ON_DEMAND_RESOURCES":{"name":"Enable On Demand Resources","description":"If enabled, tagged assets—files and asset catalog entries—are built into asset packs based on their combination of tags. Untagged resources are treated normally.","type":"Boolean","default_value":"NO","category":"Assets","values":null,"command_line_arguments":null},"EMBED_ASSET_PACKS_IN_PRODUCT_BUNDLE":{"name":"Embed Asset Packs In Product Bundle","description":"Embed all the built asset packs inside the product bundle. Since this negates the performance benefits of the On Demand Resources feature, it is only useful for testing purposes when it isn't practical to use an asset pack server.","type":"Boolean","default_value":"NO","category":"Assets","values":null,"command_line_arguments":null},"ON_DEMAND_RESOURCES_INITIAL_INSTALL_TAGS":{"name":"On Demand Resources Initial Install Tags","description":"Defined a set of initial On Demand Resources tags to be downloaded and installed with your application.","type":"StringList","default_value":null,"category":"Assets","values":null,"command_line_arguments":null},"ON_DEMAND_RESOURCES_PREFETCH_ORDER":{"name":"On Demand Resources Prefetch Order","description":"Once your app is installed, this defined a set of On Demand Resources tags that should be downloaded. These tags are downloaded after the initial installation of your application, and will be downloaded in the order the tags provided in the list from first to last.","type":"StringList","default_value":null,"category":"Assets","values":null,"command_line_arguments":null},"ASSET_PACK_MANIFEST_URL_PREFIX":{"name":"Asset Pack Manifest URL Prefix","description":"If set to anything other than the empty string, every URL in the `AssetPackManifest.plist` file will consist of this string with the name of the asset pack appended. If not set, the URLs in the `AssetPackManifest.plist` will be formed as appropriate for the build location of the asset packs. The prefix string is not escaped or quoted in any way, so any necessary escaping must be part of the URL string. This setting affects only URLs in the `AssetPackManifest.plist` file — it does not affect where asset packs are built in the local file system.","type":"String","default_value":"","category":"Assets","values":null,"command_line_arguments":null},"WRAP_ASSET_PACKS_IN_SEPARATE_DIRECTORIES":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"VALIDATE_WORKSPACE":{"name":"Validate Workspace","description":"If enabled, perform validation checks on the workspace configuration as part of the build process.","type":"Enumeration","default_value":"NO","category":"BuildOptions","values":["YES","NO","YES_ERROR"],"command_line_arguments":null},"VALIDATE_WORKSPACE_SKIPPED_SDK_FRAMEWORKS":{"name":"Validate Workspace - Ignored Frameworks","description":"List of framework names for which to suppress deprecation warnings and missing framework errors in the workspace validator.","type":"StringList","default_value":"","category":"BuildOptions","values":null,"command_line_arguments":null},"ENABLE_PREVIEWS":{"name":"Enable Previews","description":"If enabled, the product will be built with options appropriate for supporting previews.","type":"Boolean","default_value":null,"category":"BuildOptions","values":null,"command_line_arguments":null},"PROVISIONING_PROFILE":{"name":null,"description":null,"type":"ProvisioningProfile","default_value":"","category":null,"values":null,"command_line_arguments":null},"CODE_SIGN_KEYCHAIN":{"name":null,"description":null,"type":"string","default_value":"","category":null,"values":null,"command_line_arguments":null},"RemoveFile":{"name":null,"description":null,"type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CodeSignEntitlements":{"name":null,"description":null,"type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CodeSignResourceRules":{"name":null,"description":null,"type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":null},"PROVISIONING_PROFILE_DESTINATION_PATH":{"name":null,"description":null,"type":"string","default_value":"$(TARGET_BUILD_DIR)/$(CONTENTS_FOLDER_PATH)","category":null,"values":null,"command_line_arguments":null},"OutputFormat":{"name":null,"description":null,"type":"Enumeration","default_value":"same-as-input","category":null,"values":[{"Value":"same-as-input","CommandLineArgs":[]},{"Value":"openstep","CommandLineArgs":["-format","openstep"]},{"Value":"XML","CommandLineArgs":["-format","xml"]},{"Value":"xml","CommandLineArgs":["-format","xml"]},{"Value":"binary","CommandLineArgs":["-format","binary"]}],"command_line_arguments":null},"GeneratedPkgInfoFile":{"name":null,"description":null,"type":"Path","default_value":null,"category":null,"values":null,"command_line_arguments":null},"ExpandBuildSettings":{"name":null,"description":null,"type":"Boolean","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CODE_SIGN_RESOURCE_RULES_IN_BUNDLE":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"AdditionalContentFilePaths":{"name":null,"description":null,"type":"PathList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"RequiredArchitectures":{"name":null,"description":null,"type":"StringList","default_value":null,"category":null,"values":null,"command_line_arguments":null},"AdditionalInfoFileKeys":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"AdditionalInfoFileValues":{"name":null,"description":null,"type":"String","default_value":null,"category":null,"values":null,"command_line_arguments":null},"CCHROOT":{"name":null,"description":null,"type":"Path","default_value":"$(CACHE_ROOT)","category":null,"values":null,"command_line_arguments":null},"FIXED_FILES_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_TEMP_DIR)/FixedFiles","category":null,"values":null,"command_line_arguments":null},"COMPOSITE_SDK_DIRS":{"name":null,"description":null,"type":"PathList","default_value":"$(OBJROOT)/CompositeSDKs","category":null,"values":null,"command_line_arguments":null},"REZ_COLLECTOR_DIR":{"name":null,"description":"Specifies the directory in which the collected Resource Manager resources generated by `ResMerger` are stored before they are added to the product.","type":"Path","default_value":"$(TARGET_TEMP_DIR)/ResourceManagerResources","category":null,"values":null,"command_line_arguments":null},"REZ_OBJECTS_DIR":{"name":null,"description":"Specifies the directory in which compiled Resource Manager resources generated by `Rez` are stored before they are collected using `ResMerger`.","type":"Path","default_value":"$(REZ_COLLECTOR_DIR)/Objects","category":null,"values":null,"command_line_arguments":null},"DERIVED_FILES_DIR":{"name":null,"description":null,"type":"Path","default_value":"$(DERIVED_FILE_DIR)","category":null,"values":null,"command_line_arguments":null},"PRODUCT_TYPE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"PACKAGE_TYPE":{"name":null,"description":"Uniform type identifier. Identifies the type of the product the target builds. Some products may be made up of a single binary or archive. Others may comprise several files, which are grouped under a single directory. These container directories are known as *bundles*.","type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"SHALLOW_BUNDLE":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"EXECUTABLE_VARIANT_SUFFIX":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"EXECUTABLE_SUFFIX":{"name":null,"description":"Specifies the suffix of the binary filename, including the character that separates the extension from the rest of the bundle name.","type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"EXECUTABLE_NAME":{"name":null,"description":"Specifies the name of the binary the target produces.","type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"EXECUTABLE_PATH":{"name":null,"description":"Specifies the path to the binary the target produces within its bundle.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"EXECUTABLE_FOLDER_PATH":{"name":null,"description":"Identifies the directory that contains the binary the target builds.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"WRAPPER_PREFIX":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"WRAPPER_SUFFIX":{"name":null,"description":"Specifies the suffix of the product bundle name, including the character that separates the extension from the rest of the bundle name.","type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"WRAPPER_NAME":{"name":null,"description":"Specifies the filename, including the appropriate extension, of the product bundle.","type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"CONTENTS_FOLDER_PATH":{"name":null,"description":"Specifies the directory inside the generated bundle that contains the product’s files.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"INFOPLIST_PATH":{"name":null,"description":"Specifies the path to the bundle’s information property list file.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"INFOSTRINGS_PATH":{"name":null,"description":"Specifies the file that contains the bundle’s localized strings file.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"PKGINFO_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"PBDEVELOPMENTPLIST_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"VERSIONPLIST_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"EXECUTABLES_FOLDER_PATH":{"name":null,"description":"Identifies the directory that contains additional binary files.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"FRAMEWORKS_FOLDER_PATH":{"name":null,"description":"Specifies the directory that contains the product’s embedded frameworks.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"SHARED_FRAMEWORKS_FOLDER_PATH":{"name":null,"description":"Specifies the directory that contains the product’s shared frameworks.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"SHARED_SUPPORT_FOLDER_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"LOCALIZED_RESOURCES_FOLDER_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"DOCUMENTATION_FOLDER_PATH":{"name":null,"description":"Identifies the directory that contains the bundle’s documentation files.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"MODULES_FOLDER_PATH":{"name":null,"description":"Specifies the directory that contains the product’s Clang module maps and Swift module content.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"PLUGINS_FOLDER_PATH":{"name":null,"description":"Specifies the directory that contains the product’s plugins.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"SCRIPTS_FOLDER_PATH":{"name":null,"description":"Specifies the directory that contains the product’s scripts.","type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"JAVA_FOLDER_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"XPCSERVICES_FOLDER_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(CONTENTS_FOLDER_PATH)/XPCServices","category":null,"values":null,"command_line_arguments":null},"CODESIGNING_FOLDER_PATH":{"name":null,"description":null,"type":"Path","default_value":"$(TARGET_BUILD_DIR)/$(FULL_PRODUCT_NAME)","category":null,"values":null,"command_line_arguments":null},"DERIVED_PATHS":{"name":null,"description":null,"type":null,"default_value":"","category":null,"values":null,"command_line_arguments":null},"ALWAYS_USE_SEPARATE_HEADERMAPS":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"RECURSIVE_SEARCH_PATHS_FOLLOW_SYMLINKS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"CURRENT_ARCH":{"name":null,"description":"The name of the active architecture being processed.","type":"String","default_value":"$(arch)","category":null,"values":null,"command_line_arguments":null},"CURRENT_VARIANT":{"name":null,"description":"The name of the active variant being processed.","type":"String","default_value":"$(variant)","category":null,"values":null,"command_line_arguments":null},"UNSTRIPPED_PRODUCT":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"RETAIN_RAW_BINARIES":{"name":null,"description":"Specifies whether to keep copies of unstripped binaries available.","type":"Boolean","default_value":"$(INSTALLED_PRODUCT_ASIDES)","category":null,"values":null,"command_line_arguments":null},"COPY_RESOURCES_FROM_STATIC_FRAMEWORKS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"SET_DIR_MODE_OWNER_GROUP":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"SET_FILE_MODE_OWNER_GROUP":{"name":null,"description":null,"type":"Boolean","default_value":"NO","category":null,"values":null,"command_line_arguments":null},"RESOURCE_RULES_PLIST_PATH":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"GCC_VERSION_IDENTIFIER":{"name":null,"description":null,"type":"String","default_value":"$(GCC_VERSION:identifier)","category":null,"values":null,"command_line_arguments":null},"GLOBAL_CFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"NO_COMMON":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"PASCAL_STRINGS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"USE_DYNAMIC_NO_PIC":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"PREFIX_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"OTHER_PRECOMP_CFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"SYMBOL_HEADER":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"PREFIX_HEADER":{"name":null,"description":null,"type":"Path","default_value":"","category":null,"values":null,"command_line_arguments":null},"PRECOMPILE_PREFIX_HEADER":{"name":null,"description":null,"type":"Boolean","default_value":"","category":null,"values":null,"command_line_arguments":null},"USE_GCC3_PFE_SUPPORT":{"name":null,"description":null,"type":"Boolean","default_value":"","category":null,"values":null,"command_line_arguments":null},"PFE_FILE_C_DIALECTS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"CLEAN_PRECOMPS":{"name":null,"description":null,"type":"Boolean","default_value":"YES","category":null,"values":null,"command_line_arguments":null},"OPTIMIZATION_CFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"LINKER_LIBRARY_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"LD_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"LEX":{"name":null,"description":null,"type":"Path","default_value":"lex","category":null,"values":null,"command_line_arguments":null},"YACC":{"name":null,"description":null,"type":"Path","default_value":"yacc","category":null,"values":null,"command_line_arguments":null},"JAVAC_DEFAULT_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"-J-Xms64m -J-XX:NewSize=4M -J-Dfile.encoding=UTF8","category":null,"values":null,"command_line_arguments":null},"JIKES_DEFAULT_FLAGS":{"name":null,"description":null,"type":"StringList","default_value":"+E +OLDCSO","category":null,"values":null,"command_line_arguments":null},"OTHER_RESMERGERFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"MACOS_TYPE":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"MACOS_CREATOR":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"MACOS_TYPE_ARG":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"MACOS_CREATOR_ARG":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"OSAC":{"name":null,"description":null,"type":"Path","default_value":"/usr/bin/osacompile","category":null,"values":null,"command_line_arguments":null},"OTHER_OSAFLAGS":{"name":null,"description":null,"type":"StringList","default_value":"","category":null,"values":null,"command_line_arguments":null},"VERSION_INFO_STRING":{"name":null,"description":null,"type":"String","default_value":"\"@(#)PROGRAM:$(PRODUCT_NAME)  PROJECT:$(PROJECT_NAME)-$(CURRENT_PROJECT_VERSION)\"","category":null,"values":null,"command_line_arguments":null},"VERSIONING_STUB":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":null},"CP":{"name":null,"description":null,"type":"Path","default_value":"/bin/cp","category":null,"values":null,"command_line_arguments":null},"ICONV":{"name":null,"description":null,"type":"Path","default_value":"/usr/bin/iconv","category":null,"values":null,"command_line_arguments":null},"SED":{"name":null,"description":null,"type":"Path","default_value":"/usr/bin/sed","category":null,"values":null,"command_line_arguments":null},"CHOWN":{"name":null,"description":null,"type":"Path","default_value":"/usr/sbin/chown","category":null,"values":null,"command_line_arguments":null},"CHMOD":{"name":null,"description":null,"type":"Path","default_value":"/bin/chmod","category":null,"values":null,"command_line_arguments":null},"VALIDATE_PRODUCT":{"name":"Validate Built Product","description":"If enabled, perform validation checks on the product as part of the build process.","type":"Boolean","default_value":"NO","category":"BuildOptions","values":null,"command_line_arguments":null},"LD_ENTITLEMENTS_SECTION":{"name":null,"description":null,"type":"String","default_value":"","category":null,"values":null,"command_line_arguments":{"":[],"\u003c\u003cotherwise\u003e\u003e":["-Xlinker","-sectcreate","-Xlinker","__TEXT","-Xlinker","__entitlements","-Xlinker","$(value)"]}}}